{"version":3,"sources":["actions/types.ts","components/Api/api.ts","actions/index.ts","history.ts","components/SnackBar/SnackBarContent.jsx","components/Sidebar/PrivateMessageUserList.tsx","components/Sidebar/ChannelList.tsx","components/Sidebar/ServerList.tsx","components/ActionsModal/ActionsModal.tsx","components/Sidebar/Sidebar.tsx","components/SendMessage/SendMessage.tsx","components/UserInfo/UserInfo.jsx","components/ActiveUserList/ActiveUserList.tsx","components/Header/Header.tsx","components/Messages/Messages.tsx","components/Dashboard/Dashboard.tsx","components/Auth/Auth.tsx","components/App/App.tsx","reducers/chatReducer.ts","reducers/userReducer.ts","reducers/index.ts","index.tsx","middleware/socketMiddleware.ts"],"names":["ACTION","axios","create","baseURL","process","sendMessage","message","type","SEND_SOCKET_MESSAGE","payload","sendPrivateMessage","SEND_SOCKET_PRIVATE_MESSAGE","sendJoinVoice","data","SEND_SOCKET_JOIN_VOICE","sendRtcSignal","SEND_SOCKET_RTC_SIGNAL","sendLeaveVoice","SEND_SOCKET_LEAVE_VOICE","clearVoiceConnection","CLEAR_VOICE_CONNECTION","addChannel","channel","ADD_CHANNEL","addServer","server","ADD_SERVER","updateActiveUserList","serverId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","response","wrap","_context","prev","next","get","concat","sent","UPDATE_ACTIVE_USERS","stop","_x","apply","this","arguments","updateActiveState","UPDATE_ACTIVE_STATE","changeServer","split","CHANGE_SERVER","changeChannel","CHANGE_CHANNEL","changeView","view","CHANGE_VIEW","changePMUser","user","CHANGE_PM_USER","loadUserData","userId","_ref2","_callee2","url","res","_context2","keys","servers","GET_INITIAL_DATA","_x2","signIn","SIGN_IN","signOut","SIGN_OUT","createHashHistory","SnackBarContent","props","content","visible","setVisible","react_default","createElement","Snackbar","open","anchorOrigin","vertical","horizontal","onEntered","setTimeout","PrivateMessageUserList","privateMessages","useSelector","state","chat","userList","useDispatch","className","List","ListItem","map","userItem","i","Slide","direction","in","timeout","key","button","onClick","Avatar","src","alt","height","Typography","variant","ListItemAvatar","Person","ListItemText","primary","userName","Button","localStorage","clear","localStream","prevActiveChannel","connections","peerConnectionConfig","iceServers","urls","ChannelList","chatStore","channels","activeServer","activeChannel","voiceClients","voiceJoinUserId","rtcSignalData","voiceLeaveUserId","setDrawerVisible","setModalVisible","setModalType","handleSnackMessage","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAnchorEl","setChannelAnchorEl","_useState5","_useState6","isAdmin","setIsAdmin","useEffect","_getAdmin","getAdmin","handleModalShow","modalType","handleSettingsClick","e","currentTarget","handleClose","navigator","mediaDevices","getUserMedia","isSignedIn","audio","then","stream","channelId","attachVoiceChannel","disconnectPreviousVoice","onUserJoin","gotMessageFromServer","onUserLeave","audios","document","id","div","innerHTML","srcObject","autoplay","controls","muted","appendChild","audiosParent","getElementById","parentNode","insertBefore","nextSibling","newUserId","clients","forEach","RTCPeerConnection","onicecandidate","event","candidate","ice","onaddstream","gotRemoteStream","addStream","createOffer","description","setLocalDescription","sdp","localDescription","catch","console","log","close","parentDiv","querySelector","parentElement","removeChild","fromId","signal","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","userSocketId","userSocketName","setAttribute","outerHTML","connection","Fragment","Tooltip","title","placement","IconButton","MoreVert","handleChannelChange","toLowerCase","Settings","Menu","anchorEl","Boolean","onClose","MenuItem","text","clipboard","writeText","callBack","length","ServerList","handleChangeView","undefined","Home","handleServerChange","GroupWork","AddCircleOutline","ActionsModal","_useSelector2","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","handleCreateServer","_response","post","t0","handleJoinServer","_response2","_x3","_x4","handleRenameServer","_ref3","_callee3","_response3","_context3","_x5","_x6","handleDeleteServer","_ref4","_callee4","_response4","_context4","delete","_x7","_x8","handleCreateChannel","_ref5","_callee5","_response5","_context5","_x9","_x10","handleRenameChannel","_ref6","_callee6","_response6","_context6","_x11","_x12","handleDeleteChannel","_ref7","_callee7","_response7","_context7","_x13","_x14","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","Sidebar","activeView","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","pass","Modal","aria-labelledby","aria-describedby","SendMessage","_useSelector","activePMUser","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","placeholderTitle","setPlaceholderTitle","handleSubmit","msg","validMessage","trim","isValidMessage","replace","window","onclick","String","includes","TextareaAutosize","aria-label","placeholder","handleOnChange","shiftKey","from","to","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","useStyle","makeStyles","theme","card","display","flexDirection","justifyContent","textAlign","width","background","cardHeader","image","marginTop","marginBottom","cardInput","padding","input","UserInfo","setUserInfoVisible","classes","messageText","setMessageText","handleSendPrivateMessage","InputProps","InputLabelProps","shrink","ActiveUserList","activeUserList","userInfoVisible","setUserName","setAnchorEl","handleUserClick","user_name","Popover","Header","sideBarDrawerVisible","setSideBarDrawerVisible","userListDrawerVisible","setUserListDrawerVisible","setTitle","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","Messages","messageIndex","setMessageIndex","loadMessages","setLoadMessages","messageContainerBottomRef","messageContainerRef","messages","messagesLength","scroll","scrollIntoView","block","behavior","formatCode","PR","prettyPrint","onScroll","element","scrollTop","handleScrollTop","ref","CircularProgress","slice","Fade","startsWith","endsWith","isTextCodeBlock","moment","date","format","secondary","dangerouslySetInnerHTML","__html","Dashboard","updateActiveStatus","push","addEventListener","vh","innerHeight","documentElement","setProperty","Auth","loginVisible","setLoginVisible","loginDirection","setLoginDirection","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","_useState19","_useState20","userPass","setUserPass","_useState21","_useState22","userPassError","setUserPassError","_useState23","_useState24","userPassErrorMsg","setUserPassErrorMsg","_useState25","_useState26","rememberMe","setRememberMe","showMain","handleOnSubmit","error","handleCreateAccount","errorData","encodeURIComponent","setItem","JSON","stringify","handleLoginAccount","ArrowBack","helperText","Checkbox","checked","App","ThemeProvider","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","combineReducers","action","RECEIVE_SOCKET_MESSAGE","_action$payload","objectSpread","defineProperty","toConsumableArray","RECEIVE_SOCKET_PRIVATE_MESSAGE","RECEIVE_SOCKET_JOIN_VOICE","RECEIVE_SOCKET_RTC_SIGNAL","RECEIVE_SOCKET_LEAVE_VOICE","baseUrl","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","storeAPI","socket","io","emit","on","setupSocketListener","serverIds","ReactDOM","render","es","components_App_App"],"mappings":"qLAAYA,wHCIGC,WAAMC,OAAO,CAC1BC,QAHiFC,6DDFvEJ,ymCEgDL,IAAMK,EAAc,SAACC,GAAD,MAAkD,CAC3EC,KAAMP,EAAOQ,oBACbC,QAASH,IAUEI,EAAqB,SAACJ,GAAD,MAAgE,CAChGC,KAAMP,EAAOW,4BACbF,QAASH,IAUEM,EAAgB,SAACC,GAAD,MAAmD,CAC9EN,KAAMP,EAAOc,uBACbL,QAASI,IASEE,EAAgB,SAACF,GAAD,MAAmD,CAC9EN,KAAMP,EAAOgB,uBACbP,QAASI,IAGEI,EAAiB,SAACJ,GAAD,MAAqD,CACjFN,KAAMP,EAAOkB,wBACbT,QAASI,IAQEM,EAAuB,iBAAmC,CACrEZ,KAAMP,EAAOoB,uBACbX,QAAS,OASEY,EAAa,SAACC,GAAD,MAAgD,CACxEf,KAAMP,EAAOuB,YACbd,QAASa,IAIEE,EAAY,SAACC,GAAD,MAA6C,CACpElB,KAAMP,EAAO0B,WACbjB,QAASgB,IAIEE,EAAuB,SAACC,GAAD,sBAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAsB,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACjCxC,EAAMyC,IAAN,gCAAAC,OAA0Cf,IADT,OAClDS,EADkDE,EAAAK,KAExDR,EAAS,CAAE7B,KAAMP,EAAO6C,oBAAqBpC,QAAS4B,EAASxB,OAFP,wBAAA0B,EAAAO,SAAAX,MAAtB,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,IAMvBC,EAAoB,iBAAgC,CAC/D5C,KAAMP,EAAOoD,oBACb3C,QAAS,OAIE4C,EAAe,SAAC5B,GAAD,OAAoB,SAACW,GAC/CA,EAAST,EAAqBF,EAAO6B,MAAM,KAAK,KAChDlB,EAA6B,CAAE7B,KAAMP,EAAOuD,cAAe9C,QAASgB,MAIzD+B,EAAgB,SAAClC,GAAD,MAA2C,CACtEf,KAAMP,EAAOyD,eACbhD,QAASa,IAIEoC,EAAa,SAACC,GAAD,MAAqC,CAC7DpD,KAAMP,EAAO4D,YACbnD,QAASkD,IAIEE,EAAe,SAACC,GAAD,MAAuC,CACjEvD,KAAMP,EAAO+D,eACbtD,QAASqD,IAIEE,EAAe,SAACC,GAAD,sBAAAC,EAAApC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAoB,SAAAiC,EAAO/B,GAAP,IAAAgC,EAAAC,EAAA,OAAArC,EAAAC,EAAAK,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAC1C2B,EAD0C,qBAAAzB,OACfsB,GADeK,EAAA7B,KAAA,EAE5BxC,EAAMyC,IAAqB0B,GAFC,OAExCC,EAFwCC,EAAA1B,KAI9CR,EAAST,EAAqBG,OAAOyC,KAAKF,EAAIxD,KAAK2D,SAAS,GAAGlB,MAAM,KAAK,KAC1ElB,EAA6B,CAAE7B,KAAMP,EAAOyE,iBAAkBhE,QAAS4D,EAAIxD,OAL7B,wBAAAyD,EAAAxB,SAAAqB,MAApB,gBAAAO,GAAA,OAAAR,EAAAlB,MAAAC,KAAAC,YAAA,IASfyB,EAAS,SAACb,GAAD,MAAqC,CACzDvD,KAAMP,EAAO4E,QACbnE,QAASqD,IAIEe,EAAU,iBAAsB,CAC3CtE,KAAMP,EAAO8E,SACbrE,QAAS,eC5KIsE,yCCGA,SAASC,EAAgBC,GAAO,IAErCC,EAAiCD,EAAjCC,QAASC,EAAwBF,EAAxBE,QAASC,EAAeH,EAAfG,WAS1B,OACEC,EAAApD,EAAAqD,cAACC,EAAA,EAAD,CACEC,KAAML,EACN7E,QAAS4E,EACTO,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,UAAW,WAbbC,WAAW,WACTT,GAAW,IACV,6FCNQ,SAASU,IAAyB,IAEvCC,EAAoBC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAA7DH,gBACFjC,EAAOkC,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAChDqC,EAAWrE,OAAOyC,KAAKwB,GACvB3D,EAAWgE,cAQjB,OACEf,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,sBACbhB,EAAApD,EAAAqD,cAACgB,EAAA,EAAD,CAAMD,UAAU,gBACdhB,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CAAUF,UAAU,mBAApB,QACCF,EAASK,IAAI,SAACC,EAAUC,GAAX,OACZrB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAU,QAAQC,IAAI,EAAMC,QAAS,KAAOJ,EAAI,GAAIK,IAAKL,GAC9DrB,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CAAUS,QAAM,EAACX,UAAU,YAAYY,QAAS,kBAAM7E,EAASyB,EAAa4C,MAC1EpB,EAAApD,EAAAqD,cAAC4B,EAAA,EAAD,KACG,IACD7B,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,OAAOc,IAAK/G,8BAAsCgH,IAAI,YAAYC,OAAO,OAAQ,KAElGhC,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQlB,UAAU,kBACnCI,QAOXpB,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,gBACbhB,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CAAUF,UAAU,aAClBhB,EAAApD,EAAAqD,cAACkC,EAAA,EAAD,KACEnC,EAAApD,EAAAqD,cAAC4B,EAAA,EAAD,KACE7B,EAAApD,EAAAqD,cAACmC,EAAA,EAAD,QAGJpC,EAAApD,EAAAqD,cAACoC,EAAA,EAAD,CAAcC,QAAS7D,EAAK8D,WAC5BvC,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CAAQZ,QAhCM,WACpBa,aAAaC,QACb3F,EAASyC,OA8BH,mBCVNmD,EACAC,EACAC,8DACAC,GAAuB,CACzBC,WAAY,CAAC,CAAEC,KAAM,kCAAoC,CAAEA,KAAM,kCAGpD,SAASC,GAAYrD,GAElC,IAAMsD,EAAYvC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OACrDsC,EAAW1G,OAAOyC,KAAKgE,EAAU/D,QAAQ+D,EAAUE,cAA5B,UACrBA,EAAgGF,EAAhGE,aAAcC,EAAkFH,EAAlFG,cAAeC,EAAmEJ,EAAnEI,aAAcC,EAAqDL,EAArDK,gBAAiBC,EAAoCN,EAApCM,cAAeC,EAAqBP,EAArBO,iBAC7E1G,EAAWgE,cACXtC,EAAOkC,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAG9CiF,EAAwE9D,EAAxE8D,iBAAkBC,EAAsD/D,EAAtD+D,gBAAiBC,EAAqChE,EAArCgE,aAAcC,EAAuBjE,EAAvBiE,mBATEC,EAYfC,mBAAS,MAZMC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAYpDI,EAZoDF,EAAA,GAYpCG,EAZoCH,EAAA,GAAAI,EAabL,mBAAS,MAbIM,EAAA5H,OAAAwH,EAAA,EAAAxH,CAAA2H,EAAA,GAapDE,EAboDD,EAAA,GAanCE,EAbmCF,EAAA,GAAAG,EAc7BT,oBAAS,GAdoBU,EAAAhI,OAAAwH,EAAA,EAAAxH,CAAA+H,EAAA,GAcpDE,EAdoDD,EAAA,GAc3CE,EAd2CF,EAAA,GAiB3DG,oBAAU,WAAM,SAAAC,IAAA,OAAAA,EAAApI,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAEd,SAAAC,IAAA,IAAAP,EAAAS,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACMb,EAAW6G,EAAanF,MAAM,KAAK,GADzCf,EAAAE,KAAA,EAEyBxC,EAAMyC,IAAN,0BAAAC,OAAoCf,EAApC,YAAAe,OAAuDmB,EAAKG,SAFrF,OAEQ5B,EAFRE,EAAAK,KAGEoH,EAAW3H,EAASxB,MAHtB,wBAAA0B,EAAAO,SAAAX,OAFca,MAAAC,KAAAC,YAAA,WAAAgH,EAAAlH,MAAAC,KAAAC,WAQdiH,IACC,CAAC1B,EAAc3E,IAGlB,IAeMsG,EAAkB,SAACC,GACvBpB,EAAaoB,GACbrB,GAAgB,IAIZsB,EAAsB,SAACC,EAAQhK,GACtB,WAATA,EAAmBiJ,EAAkBe,EAAEC,eACzB,YAATjK,GAAoBqJ,EAAmBW,EAAEC,gBAI9CC,GAAc,WAClBjB,EAAkB,MAClBI,EAAmB,OAgBrBK,oBAAU,WACJS,UAAUC,aAAaC,cAAgB9G,EAAK+G,YAC9CH,UAAUC,aAAaC,aAAa,CAAEE,OAAO,IAAQC,KAAK,SAAAC,GACxDhD,EAAcgD,KAGjB,CAAClH,EAAK+G,aAGTZ,oBAAU,WACR,GAAoC,UAAhCvB,EAAcpF,MAAM,KAAK,GAAgB,CAC3C,IAAIzC,EAAO,CAAEoD,OAAQH,EAAKG,OAAQ2D,SAAU9D,EAAK8D,SAAUqD,UAAWvC,EAAcpF,MAAM,KAAK,IAC/F4H,KACA9I,EAASxB,EAAcC,IACvBoH,EAAoBS,MACf,CACL,IAAI7H,EAEFA,EADEoH,EACK,CAAEhE,OAAQH,EAAKG,OAAQ2D,SAAU9D,EAAK8D,SAAUqD,UAAWhD,EAAkB3E,MAAM,KAAK,IACrF,CAAEW,OAAQH,EAAKG,OAAQ2D,SAAU9D,EAAK8D,SAAUqD,UAAWvC,EAAcpF,MAAM,KAAK,IAChGlB,EAASnB,EAAeJ,IACxBuB,EAASjB,KACTgK,KAEFlD,EAAoBS,GACnB,CAACA,IAGJuB,oBAAU,WACJrB,GAAmBD,GAAgBX,GACrCoD,GAAWxC,EAAiBD,IAE7B,CAACC,EAAiBD,IAGrBsB,oBAAU,WACR,GAAwB,KAApBrB,EAAwB,CAC1B,IAAM3E,EAAS4E,EAAc5E,OAE7BoH,GAAqBpH,EADL4E,KAGjB,CAACA,EAAeD,IAGnBqB,oBAAU,WACiB,KAArBnB,GACFwC,GAAYxC,IAEb,CAACA,IAGJ,IAAMoC,GAAqB,WACzB,IAAIK,EAASC,SAASlG,cAAc,OACpCiG,EAAOE,GAAK,kBAEZ,IAAIC,EAAMF,SAASlG,cAAc,OAEjCoG,EAAIC,UAAJ,gGAAAhJ,OADevC,8BACf,gGAAAuC,OAMMmB,EAAK8D,SANX,oCAWA,IAAIkD,EAAQU,SAASlG,cAAc,SAEnCwF,EAAMc,UAAY5D,EAClB8C,EAAMe,UAAW,EACjBf,EAAMgB,UAAW,EACjBhB,EAAMiB,OAAQ,EAGdL,EAAIM,YAAYlB,GAChBS,EAAOS,YAAYN,GACnB,IAAIO,EAAeT,SAASU,eAAexD,EAAcpF,MAAM,KAAK,IAChE2I,GACEA,EAAaE,YACfF,EAAaE,WAAWC,aAAab,EAAQU,EAAaI,cAM1DjB,GAAa,SAACkB,EAAmBC,GAErCA,EAAQC,QAAQ,SAAA1I,GAEToE,EAAYpE,EAAKG,UAEpBiE,EAAYpE,EAAKG,QAAU,IAAIwI,kBAAkBtE,IAGjDD,EAAYpE,EAAKG,QAAQyI,eAAiB,SAACC,GACjB,OAApBA,EAAMC,WACRxK,EAASrB,EAAc,CAAEkD,OAAQH,EAAKG,OAAQ4I,IAAKF,EAAMC,cAK7D1E,EAAYpE,EAAKG,QAAQ6I,YAAc,SAACH,GACtCI,GAAgBJ,EAAO7I,EAAKG,OAAQH,EAAK8D,WAI3CM,EAAYpE,EAAKG,QAAQ+I,UAAUhF,MAMnCsE,IAAcxI,EAAKG,QACrBiE,EAAYoE,GAAWW,cAAclC,KAAK,SAACmC,GACzChF,EAAYoE,GACTa,oBAAoBD,GACpBnC,KAAK,WACJ3I,EAASrB,EAAc,CAAEkD,OAAQqI,EAAWc,IAAKlF,EAAYoE,GAAWe,sBAEzEC,MAAM,SAAC/C,GAAD,OAAYgD,QAAQC,IAAIjD,QAMjCe,GAAc,SAACrH,GAEnBiE,EAAYjE,GAAQwJ,QACpBvF,EAAYjE,GAAU,KAEtB,IACIyJ,EADQlC,SAASmC,cAAc,iBAAmB1J,EAAS,MACzC2J,cACAF,EAAUE,cAChBC,YAAYH,IAIxBrC,GAAuB,SAACyC,EAAgBC,GAExCD,IAAWhK,EAAKG,SACd8J,EAAOX,KACTlF,EAAY4F,GACTE,qBAAqB,IAAIC,sBAAsBF,EAAOX,MACtDrC,KAAK,WACoB,UAApBgD,EAAOX,IAAI7M,MACb2H,EAAY4F,GACTI,eACAnD,KAAK,SAACmC,GACLhF,EAAY4F,GACTX,oBAAoBD,GACpBnC,KAAK,WACJ3I,EAASrB,EAAc,CAAEkD,OAAQ6J,EAAQV,IAAKlF,EAAY4F,GAAQT,sBAEnEC,MAAM,SAAC/C,GAAD,OAAYgD,QAAQC,IAAIjD,OAElC+C,MAAM,SAAC/C,GAAD,OAAYgD,QAAQC,IAAIjD,OAGpC+C,MAAM,SAAC/C,GAAD,OAAYgD,QAAQC,IAAIjD,KAG/BwD,EAAOlB,KACT3E,EAAY4F,GAAQK,gBAAgB,IAAIC,gBAAgBL,EAAOlB,MAAMS,MAAM,SAAC/C,GAAD,OAAYgD,QAAQC,IAAIjD,OAMnGwC,GAAkB,SAACJ,EAAY0B,EAAsBC,GAEzD,IAAI5C,EAAMF,SAASlG,cAAc,OAEjCoG,EAAIC,UAAJ,gGAAAhJ,OADevC,8BACf,gGAAAuC,OAMMmB,EAAK8D,SANX,oCAYA,IAAIkD,EAAQU,SAASlG,cAAc,SACnCwF,EAAMyD,aAAa,cAAeF,GAClCvD,EAAMc,UAAYe,EAAM3B,OACxBF,EAAMe,UAAW,EAGjB,IAAIN,EAASC,SAASU,eAAe,mBAGrCR,EAAIM,YAAYlB,GAChBS,EAAOS,YAAYN,IAIfP,GAA0B,WAC9B,IAAII,EAASC,SAASU,eAAe,mBACjCX,IACFA,EAAOiD,UAAY,IAGjBtG,GACFA,EAAYsE,QAAQ,SAACiC,GACnBvG,EAAYuG,GAAYhB,UAG5BvF,EAAc,IAGhB,OACE7C,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,sBACbhB,EAAApD,EAAAqD,cAACgB,EAAA,EAAD,CAAMD,UAAU,gBACdhB,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CAAUF,UAAU,mBACjBoC,EAAanF,MAAM,KAAK,GACxByG,EACC1E,EAAApD,EAAAqD,cAACD,EAAApD,EAAMyM,SAAP,KACErJ,EAAApD,EAAAqD,cAACqJ,GAAA,EAAD,CAASC,MAAM,kBAAkB7H,IAAI,kBAAkB8H,UAAU,QAAQxI,UAAU,WACjFhB,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,CAAY7H,QAAS,SAAAsD,GAAC,OAAID,EAAoBC,EAAG,YAC9C,IACDlF,EAAApD,EAAAqD,cAACyJ,GAAA,EAAD,MAAa,OAIjB,MAELvG,EAAShC,IAAI,SAAClF,EAASoF,GAAV,OACZrB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAU,QAAQC,IAAI,EAAMC,QAAS,KAAOJ,EAAI,GAAIK,IAAKzF,EAAUmH,GACxEpD,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CACEU,QAAS,SAAAsD,GAAC,OAtRM,SAACjJ,GAC3Bc,EAASoB,EAAclC,IACS,qBAArByH,GAAkCA,GAAiB,GAoRtCiG,CAAoB1N,IAClC0F,QAAM,EACNX,UAAU,eACVoF,GAAE,GAAA9I,OAAKrB,EAAQgC,MAAM,KAAK,KAE1B+B,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,SAClBlC,EAAApD,EAAAqD,cAAA,KAAGe,UAAU,mBAAb,KACC/E,EAAQgC,MAAM,KAAK,GAAG2L,eAExBlF,EACC1E,EAAApD,EAAAqD,cAACqJ,GAAA,EAAD,CAASC,MAAM,kBAAkB7H,IAAI,kBAAkB8H,UAAU,QAAQxI,UAAU,WACjFhB,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,CAAY7H,QAAS,SAAAsD,GAAC,OAAID,EAAoBC,EAAG,aAC9C,IACDlF,EAAApD,EAAAqD,cAAC4J,GAAA,EAAD,CAAU7I,UAAU,qBAAsB,MAG5C,UAMZhB,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,gBACbhB,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CAAUF,UAAU,aAClBhB,EAAApD,EAAAqD,cAACkC,EAAA,EAAD,KACEnC,EAAApD,EAAAqD,cAAC4B,EAAA,EAAD,KACE7B,EAAApD,EAAAqD,cAACmC,EAAA,EAAD,QAGJpC,EAAApD,EAAAqD,cAACoC,EAAA,EAAD,CAAcC,QAAS7D,EAAK8D,WAC5BvC,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CAAQZ,QAnRM,WACpBa,aAAaC,QACb3F,EAASyC,OAiRH,cAIJQ,EAAApD,EAAAqD,cAAC6J,GAAA,EAAD,CACE1D,GAAG,uBACH2D,SAAU7F,EACV/D,KAAM6J,QAAQ9F,GACdtC,QAASwD,GACT6E,QAAS7E,IAETpF,EAAApD,EAAAqD,cAACiK,GAAA,EAAD,CAAUtI,QAAS,kBAxRIuI,EAwRsB/G,EAAanF,MAAM,KAAK,GAvRzEoH,UAAU+E,UAAUC,UAAUF,QAC9BtG,EAAkB,aAAAvG,OAAc6M,EAAd,wBAAyC,GAFjC,IAACA,IAyRpB,IADH,eAEe/G,EAAanF,MAAM,KAAK,GAAI,KAE3C+B,EAAApD,EAAAqD,cAACiK,GAAA,EAAD,CAAUtI,QAAS,kBAAMmD,EAAgB,mBAAzC,wBACA/E,EAAApD,EAAAqD,cAACiK,GAAA,EAAD,CAAUtI,QAAS,kBAAMmD,EAAgB,mBAAzC,mBACA/E,EAAApD,EAAAqD,cAACiK,GAAA,EAAD,CAAUtI,QAAS,kBAAMmD,EAAgB,oBAAzC,kBAGF/E,EAAApD,EAAAqD,cAAC6J,GAAA,EAAD,CACE1D,GAAG,wBACH2D,SAAUzF,EACVnE,KAAM6J,QAAQ1F,GACd1C,QAASwD,GACT6E,QAAS7E,IAETpF,EAAApD,EAAAqD,cAACiK,GAAA,EAAD,CAAUtI,QAAS,kBAAMmD,EAAgB,oBAAzC,yBACA/E,EAAApD,EAAAqD,cAACiK,GAAA,EAAD,CAAUtI,QAAS,kBA1UI0I,EA0UsB,kBAAMvF,EAAgB,wBAzU/C,IAApB5B,EAASoH,OACX1G,EAAmB,8CAA8C,GAEjEyG,KAJwB,IAACA,IA2UpB,IADH,iBAEiB,yCC9YV,SAASE,GAAW5K,GAEjC,IAAMsD,EAAYvC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OACrD1B,EAAU1C,OAAOyC,KAAKgE,EAAU/D,SAChCpC,EAAWgE,cAGT4C,EAAkC/D,EAAlC+D,gBAAiBC,EAAiBhE,EAAjBgE,aAcnB6G,EAAmB,SAACnM,EAAcgM,GACtCvN,EAASsB,EAAWC,SACHoM,IAAbJ,GAAwBA,KAG9B,OACEtK,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,qBACbhB,EAAApD,EAAAqD,cAACgB,EAAA,EAAD,KACEjB,EAAApD,EAAAqD,cAACqJ,GAAA,EAAD,CAASC,MAAM,OAAO7H,IAAI,OAAO8H,UAAU,QAAQxI,UAAU,WAC3DhB,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,CAAYzI,UAAU,YAAYY,QAAS,kBAAM6I,EAAiB,UAChEzK,EAAApD,EAAAqD,cAAC0K,GAAA,EAAD,QAGJ3K,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,mBAEd7B,EAAQgC,IAAI,SAAA/E,GAAM,OACjB4D,EAAApD,EAAAqD,cAACqJ,GAAA,EAAD,CAASC,MAAOnN,EAAO6B,MAAM,KAAK,GAAIyD,IAAKtF,EAAQoN,UAAU,QAAQxI,UAAU,WAC7EhB,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,CACEzI,UAAU,cACVY,QAAS,kBAAM6I,EAAiB,UAAW,kBA9B5B,SAACrO,GAC1BW,EAASiB,EAAa5B,IA6BqCwO,CAAmBxO,OAEpE4D,EAAApD,EAAAqD,cAAC4K,GAAA,EAAD,UAKN7K,EAAApD,EAAAqD,cAACqJ,GAAA,EAAD,CAASC,MAAM,gBAAgB7H,IAAI,gBAAgB8H,UAAU,QAAQxI,UAAU,WAC7EhB,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,CAAYzI,UAAU,cAAcY,QAAS,kBAAM6I,EAAiB,UAAW,kBAhCrF7G,EAAa,2BACbD,GAAgB,OAgCR3D,EAAApD,EAAAqD,cAAC6K,GAAA,EAAD,uGCrCG,SAASC,GAAanL,GAA0B,IAErDhB,EAAW+B,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAApDG,OAFqDoM,EAGrBrK,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAAzEuC,EAHqD4H,EAGrD5H,aAAcC,EAHuC2H,EAGvC3H,cAEhBtG,EAAWgE,cAGT8C,EAAkCjE,EAAlCiE,mBAAoBmB,EAAcpF,EAAdoF,UARiClB,EAWvBC,oBAAS,GAXcC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAWtDmH,EAXsDjH,EAAA,GAWzCkH,EAXyClH,EAAA,GAAAI,EAYdL,mBAAS,QAZKM,EAAA5H,OAAAwH,EAAA,EAAAxH,CAAA2H,EAAA,GAYtD+G,EAZsD9G,EAAA,GAYvC+G,EAZuC/G,EAAA,GAAAG,EAanBT,oBAAS,GAbUU,EAAAhI,OAAAwH,EAAA,EAAAxH,CAAA+H,EAAA,GAatD6G,EAbsD5G,EAAA,GAavC6G,EAbuC7G,EAAA,GAAA8G,EAcVxH,mBAAS,QAdCyH,EAAA/O,OAAAwH,EAAA,EAAAxH,CAAA8O,EAAA,GActDE,EAdsDD,EAAA,GAcrCE,EAdqCF,EAAA,GAAAG,EAevB5H,oBAAS,GAfc6H,EAAAnP,OAAAwH,EAAA,EAAAxH,CAAAkP,EAAA,GAetDE,EAfsDD,EAAA,GAezCE,EAfyCF,EAAA,GAAAG,EAgBdhI,mBAAS,QAhBKiI,EAAAvP,OAAAwH,EAAA,EAAAxH,CAAAsP,EAAA,GAgBtDE,EAhBsDD,EAAA,GAgBvCE,EAhBuCF,EAAA,GAAAG,EAiBzBpI,mBAAS,IAjBgBqI,EAAA3P,OAAAwH,EAAA,EAAAxH,CAAA0P,EAAA,GAiBtDE,EAjBsDD,EAAA,GAiB1CE,EAjB0CF,EAAA,GAAAG,EAkB7BxI,mBAAS,IAlBoByI,EAAA/P,OAAAwH,EAAA,EAAAxH,CAAA8P,EAAA,GAkBtDhQ,EAlBsDiQ,EAAA,GAkB5CC,EAlB4CD,EAAA,GAAAE,EAmBvB3I,mBAAS,IAnBc4I,EAAAlQ,OAAAwH,EAAA,EAAAxH,CAAAiQ,EAAA,GAmBtDE,GAnBsDD,EAAA,GAmBzCE,GAnByCF,EAAA,GAsCvDG,GAAkB,eAAAtQ,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOuP,EAAoBzN,GAA3B,IAAAmO,EAAA9R,EAAA,OAAA0B,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEAxC,EAAMoS,KAAN,6BAAA1P,OAAwC+O,EAAxC,YAAA/O,OAA6DsB,IAF7D,OAEjB5B,EAFiBE,EAAAK,KAGvBR,EAASZ,EAAUa,EAASxB,OACtBP,EAJiB,UAAAqC,OAIGN,EAASxB,KAAKY,OAAO6B,MAAM,KAAK,GAJnC,aAAAX,OAKrBN,EAASxB,KAAKY,OAAO6B,MAAM,KAAK,GALX,YAOvB4F,EAAmB5I,GAAS,GAPLiC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAA+P,GAAA/P,EAAA,SASvB2G,EAAmB3G,EAAA+P,GAAIjQ,SAASxB,MAAM,GATf,yBAAA0B,EAAAO,SAAAX,EAAA,iBAAH,gBAAAY,EAAA2B,GAAA,OAAA7C,EAAAmB,MAAAC,KAAAC,YAAA,GAclBqP,GAAgB,eAAArO,EAAApC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAiC,EAAOvC,EAAkBqC,GAAzB,IAAAuO,EAAA,OAAAxQ,EAAAC,EAAAK,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAAA6B,EAAA9B,KAAA,EAAA8B,EAAA7B,KAAA,EAEExC,EAAMoS,KAAN,yBAAA1P,OAAoCf,EAApC,YAAAe,OAAuDsB,IAFzD,OAEf5B,EAFeiC,EAAA1B,KAGrBsG,EAAmB7G,EAASxB,MAAM,GAHbyD,EAAA7B,KAAA,gBAAA6B,EAAA9B,KAAA,EAAA8B,EAAAgO,GAAAhO,EAAA,SAKrB4E,EAAmB5E,EAAAgO,GAAIjQ,SAASxB,MAAM,GALjB,yBAAAyD,EAAAxB,SAAAqB,EAAA,iBAAH,gBAAAsO,EAAAC,GAAA,OAAAxO,EAAAlB,MAAAC,KAAAC,YAAA,GAUhByP,GAAkB,eAAAC,EAAA9Q,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA2Q,EAAOnB,EAAoB9P,GAA3B,IAAAkR,EAAA,OAAA9Q,EAAAC,EAAAK,KAAA,SAAAyQ,GAAA,cAAAA,EAAAvQ,KAAAuQ,EAAAtQ,MAAA,cAAAsQ,EAAAvQ,KAAA,EAAAuQ,EAAAtQ,KAAA,EAEAxC,EAAMoS,KAAN,6BAAA1P,OACQ+O,EADR,cAAA/O,OAC+Bf,EAD/B,YAAAe,OACkDsB,IAHlD,OAEjB5B,EAFiB0Q,EAAAnQ,KAKvBsG,EAAmB7G,EAASxB,MAAM,GALXkS,EAAAtQ,KAAA,gBAAAsQ,EAAAvQ,KAAA,EAAAuQ,EAAAT,GAAAS,EAAA,SAOvB7J,EAAmB6J,EAAAT,GAAIjQ,SAASxB,MAAM,GAPf,yBAAAkS,EAAAjQ,SAAA+P,EAAA,iBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAA5P,MAAAC,KAAAC,YAAA,GAYlBgQ,GAAkB,eAAAC,EAAArR,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAkR,EAAOxR,EAAkBqC,GAAzB,IAAAoP,EAAA,OAAArR,EAAAC,EAAAK,KAAA,SAAAgR,GAAA,cAAAA,EAAA9Q,KAAA8Q,EAAA7Q,MAAA,cAAA6Q,EAAA9Q,KAAA,EAAA8Q,EAAA7Q,KAAA,EAEAxC,EAAMsT,OAAN,2BAAA5Q,OAAwCf,EAAxC,YAAAe,OAA2DsB,IAF3D,OAEjB5B,EAFiBiR,EAAA1Q,KAGvBsG,EAAmB7G,EAASxB,MAAM,GAHXyS,EAAA7Q,KAAA,gBAAA6Q,EAAA9Q,KAAA,EAAA8Q,EAAAhB,GAAAgB,EAAA,SAKvBpK,EAAmBoK,EAAAhB,GAAIjQ,SAASxB,MAAM,GALf,yBAAAyS,EAAAxQ,SAAAsQ,EAAA,iBAAH,gBAAAI,EAAAC,GAAA,OAAAN,EAAAnQ,MAAAC,KAAAC,YAAA,GAUlBwQ,GAAmB,eAAAC,EAAA7R,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA0R,EAAO3B,EAAqBxQ,GAA5B,IAAAoS,EAAAvT,EAAA,OAAA0B,EAAAC,EAAAK,KAAA,SAAAwR,GAAA,cAAAA,EAAAtR,KAAAsR,EAAArR,MAAA,cAAAqR,EAAAtR,KAAA,EAAAsR,EAAArR,KAAA,EAEDxC,EAAMoS,KAAN,+BAAA1P,OAA0CsP,EAA1C,YAAAtP,OAAgElB,EAAhE,YAAAkB,OAAiFsB,IAFhF,OAElB5B,EAFkByR,EAAAlR,KAGxBR,EAASf,EAAWgB,EAASxB,OACvBP,EAJkB,UAAAqC,OAIEN,EAASxB,KAAKS,QAAQgC,MAAM,KAAK,GAJnC,aAAAX,OAIiDN,EAASxB,KAAKS,QAAQgC,MAC7F,IAAI,IALkB,YAOxB4F,EAAmB5I,GAAS,GAPJwT,EAAArR,KAAA,gBAAAqR,EAAAtR,KAAA,EAAAsR,EAAAxB,GAAAwB,EAAA,SASxB5K,EAAmB4K,EAAAxB,GAAIjQ,SAASxB,MAAM,GATd,yBAAAiT,EAAAhR,SAAA8Q,EAAA,iBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAA3Q,MAAAC,KAAAC,YAAA,GAcnB+Q,GAAmB,eAAAC,EAAApS,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAiS,EAAOlC,EAAqBhH,GAA5B,IAAAmJ,EAAA,OAAApS,EAAAC,EAAAK,KAAA,SAAA+R,GAAA,cAAAA,EAAA7R,KAAA6R,EAAA5R,MAAA,cAAA4R,EAAA7R,KAAA,EAAA6R,EAAA5R,KAAA,EAEDxC,EAAMoS,KAAN,+BAAA1P,OACUsP,EADV,eAAAtP,OACmCsI,EADnC,cAAAtI,OAEnB8F,EAAanF,MAAM,KAAK,GAFL,YAAAX,OAGVsB,IALW,OAElB5B,EAFkBgS,EAAAzR,KAOxBsG,EAAmB7G,EAASxB,MAAM,GAPVwT,EAAA5R,KAAA,gBAAA4R,EAAA7R,KAAA,EAAA6R,EAAA/B,GAAA+B,EAAA,SASxBnL,EAAmBmL,EAAA/B,GAAIjQ,SAASxB,MAAM,GATd,yBAAAwT,EAAAvR,SAAAqR,EAAA,iBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAAlR,MAAAC,KAAAC,YAAA,GAcnBsR,GAAmB,eAAAC,EAAA3S,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAwS,EAAOzC,EAAqBhH,GAA5B,IAAA0J,EAAA,OAAA3S,EAAAC,EAAAK,KAAA,SAAAsS,GAAA,cAAAA,EAAApS,KAAAoS,EAAAnS,MAAA,cAAAmS,EAAApS,KAAA,EAAAoS,EAAAnS,KAAA,EAEDxC,EAAMsT,OAAN,6BAAA5Q,OACQsI,EADR,cAAAtI,OAC8B8F,EAAanF,MAAM,KAAK,GADtD,YAAAX,OACmEsB,IAHlE,OAElB5B,EAFkBuS,EAAAhS,KAKxBsG,EAAmB7G,EAASxB,MAAM,GALV+T,EAAAnS,KAAA,gBAAAmS,EAAApS,KAAA,EAAAoS,EAAAtC,GAAAsC,EAAA,SAOxB1L,EAAmB0L,EAAAtC,GAAIjQ,SAASxB,MAAM,GAPd,yBAAA+T,EAAA9R,SAAA4R,EAAA,iBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAAzR,MAAAC,KAAAC,YAAA,GAYnB6R,GAAiB,SAACxK,EAAkByK,GAC1B,UAAVzK,EAAExD,KACJiO,KA0VJ,MAAkB,uBAAd3K,EAEAhF,EAAApD,EAAAqD,cAAC2P,GAAA,EAAD,CAAO5O,UAAU,oBArVjBhB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAW4J,EAAe3J,GAAIyJ,EAAaxJ,QAAS,IAAKoO,cAAY,EAACC,eAAa,GACxF9P,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,wCAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,EAAGH,GAAI,IACpBrQ,EAAApD,EAAAqD,cAACwQ,GAAA,EAAD,CAAMzP,UAAU,aACdhB,EAAApD,EAAAqD,cAACyQ,GAAA,EAAD,CAAgB9O,QAAS,kBA/GnCwJ,EAAiB,SACjBc,EAAiB,QACjBZ,GAAiB,QACjBJ,GAAe,KA6GHlL,EAAApD,EAAAqD,cAAC0Q,GAAA,EAAD,KACE3Q,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUM,cAAY,GAArD,UAGA5Q,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAArC,gDAGA7Q,EAAApD,EAAAqD,cAAC6Q,GAAA,EAAD,KACE9Q,EAAApD,EAAAqD,cAAC8Q,GAAA,EAAD,CAAY/P,UAAU,qBAExBhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CAAQN,QAAQ,YAAYoO,MAAM,UAAUtP,UAAU,gBAAtD,uBAORhB,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,EAAGH,GAAI,IACpBrQ,EAAApD,EAAAqD,cAACwQ,GAAA,EAAD,CAAMzP,UAAU,aACdhB,EAAApD,EAAAqD,cAACyQ,GAAA,EAAD,CAAgB9O,QAAS,kBA3InCwJ,EAAiB,SACjBM,EAAmB,QACnBI,GAAe,QACfZ,GAAe,KAyIHlL,EAAApD,EAAAqD,cAAC0Q,GAAA,EAAD,KACE3Q,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,YAAYM,cAAY,GAAvD,QAGA5Q,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAArC,6CAGA7Q,EAAApD,EAAAqD,cAAC6Q,GAAA,EAAD,KACE9Q,EAAApD,EAAAqD,cAAC+Q,GAAA,EAAD,CAAUhQ,UAAU,qBAEtBhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CAAQN,QAAQ,YAAYoO,MAAM,YAAYtP,UAAU,gBAAxD,uBAeZhB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAWkK,EAAiBjK,GAAI6J,EAAewE,cAAY,EAACC,eAAa,EAACrO,QAAS,KACxFzB,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,qBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAClC,IADH,oFAEoF,KAEpF7Q,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,sBACH8K,MAAM,cACNC,MAAO9E,EACP+E,SAAU,SAAAlM,GAAC,OAAIoH,EAAcpH,EAAEmM,OAAOF,QACtCG,WAAY,SAAApM,GAAC,OAAIwK,GAAexK,EAAG,kBAAM4H,GAAmBT,EAAYzN,MACxE2S,OAAO,QACPrP,QAAQ,WACRsP,aAAa,SAGjBxR,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACN1O,QAAS,kBAAMkL,GAAmBT,EAAYzN,KAJhD,oBAmGNoB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAW0K,EAAezK,GAAIqK,EAAagE,cAAY,EAACC,eAAa,EAACrO,QAAS,KACpFzB,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,mBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAClC,IADH,8EAE8E,KAE9E7Q,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,oBACH8K,MAAM,YACNC,MAAO5U,EACP6U,SAAU,SAAAlM,GAAC,OAAIuH,EAAYvH,EAAEmM,OAAOF,QACpCG,WAAY,SAAApM,GAAC,OAAIwK,GAAexK,EAAG,kBAAMgI,GAAiB3Q,EAAUqC,MACpE2S,OAAO,QACPrP,QAAQ,WACRsP,aAAa,SAGjBxR,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACN1O,QAAS,kBAAMsL,GAAiB3Q,EAAUqC,KAJ5C,mBAiJa,mBAAdoG,EACAhF,EAAApD,EAAAqD,cAAC2P,GAAA,EAAD,CAAO5O,UAAU,oBAjItBhB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAMqO,cAAY,EAACC,eAAa,EAACrO,QAAS,KACpEzB,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,sBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAClC,IADH,0EAE0E,KAE1E7Q,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,uBACH8K,MAAM,eACNC,MAAOvE,GACPwE,SAAU,SAAAlM,GAAC,OAAI2H,GAAe3H,EAAEmM,OAAOF,QACvCG,WAAY,SAAApM,GAAC,OAAIwK,GAAexK,EAAG,kBAAMmJ,GAAoBzB,GAAaxJ,MAC1EmO,OAAO,QACPrP,QAAQ,WACRsP,aAAa,SAGjBxR,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACN1O,QAAS,kBAAMyM,GAAoBzB,GAAaxJ,KAJlD,sBA0Ge,kBAAd4B,EACFhF,EAAApD,EAAAqD,cAAC2P,GAAA,EAAD,CAAO5O,UAAU,oBA9PtBhB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAMqO,cAAY,EAACC,eAAa,EAACrO,QAAS,KACpEzB,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,kBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAClC,IADH,wCAEwCzN,EAAanF,MAAM,KAAK,GAAI,KAEpE+B,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,uBACH8K,MAAM,eACNC,MAAO9E,EACP+E,SAAU,SAAAlM,GAAC,OAAIoH,EAAcpH,EAAEmM,OAAOF,QACtCG,WAAY,SAAApM,GAAC,OAAIwK,GAAexK,EAAG,kBAAMoI,GAAmBjB,EAAYjJ,EAAanF,MAAM,KAAK,OAChGsT,OAAO,QACPrP,QAAQ,WACRsP,aAAa,SAGjBxR,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACN1O,QAAS,kBAAM0L,GAAmBjB,EAAYjJ,EAAanF,MAAM,KAAK,MAJxE,qBAuOe,mBAAd+G,EACFhF,EAAApD,EAAAqD,cAAC2P,GAAA,EAAD,CAAO5O,UAAU,oBA5FtBhB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAMqO,cAAY,EAACC,eAAa,EAACrO,QAAS,KACpEzB,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,kBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAClC,IADH,0CAE0CxN,EAAcpF,MAAM,KAAK,GAAI,KAEvE+B,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,uBACH8K,MAAM,eACNC,MAAOvE,GACPwE,SAAU,SAAAlM,GAAC,OAAI2H,GAAe3H,EAAEmM,OAAOF,QACvCG,WAAY,SAAApM,GAAC,OAAIwK,GAAexK,EAAG,kBAAM0J,GAAoBhC,GAAavJ,EAAcpF,MAAM,KAAK,OACnGsT,OAAO,QACPrP,QAAQ,WACRsP,aAAa,SAGjBxR,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACN1O,QAAS,kBAAMgN,GAAoBhC,GAAavJ,EAAcpF,MAAM,KAAK,MAJ3E,sBAqEe,mBAAd+G,EACFhF,EAAApD,EAAAqD,cAAC2P,GAAA,EAAD,CAAO5O,UAAU,oBArDtBhB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAMqO,cAAY,EAACC,eAAa,EAACrO,QAAS,KACpEzB,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,mBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAClC,IADH,qCAEqCxN,EAAcpF,MAAM,KAAK,GAAI,MAGpE+B,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACNmB,MAAO,CAAEC,gBAAiB,QAASC,YAAa,OAChD/P,QAAS,kBAAMuN,GAAoBvC,GAAavJ,EAAcpF,MAAM,KAAK,MAL3E,OASA+B,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACNmB,MAAO,CAAEC,gBAAiB,MAAOE,WAAY,OAC7ChQ,QAAS,kBAAMiC,EAAmB,wBAAwB,KAL5D,UA+Be,kBAAdmB,EACFhF,EAAApD,EAAAqD,cAAC2P,GAAA,EAAD,CAAO5O,UAAU,oBA3NtBhB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAMqO,cAAY,EAACC,eAAa,EAACrO,QAAS,KACpEzB,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,kBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAClC,IADH,qCAEqCzN,EAAanF,MAAM,KAAK,GAAI,MAGnE+B,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACNmB,MAAO,CAAEC,gBAAiB,QAASC,YAAa,OAChD/P,QAAS,kBAAMiM,GAAmBzK,EAAanF,MAAM,KAAK,GAAIW,KALhE,OASAoB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,eACVkB,QAAQ,YACRoO,MAAM,UACNmB,MAAO,CAAEC,gBAAiB,MAAOE,WAAY,OAC7ChQ,QAAS,kBAAMiC,EAAmB,wBAAwB,KAL5D,UAqMI,KCnfD,SAASgO,GAAQjS,GAE9B,IAAMnB,EAAOkC,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAC9CqT,EAAenR,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAAxDiR,WAGF/U,EAAWgE,cAGT2C,EAAqB9D,EAArB8D,iBAT2CI,EAYXC,oBAAS,GAZEC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAY5CiO,EAZ4C/N,EAAA,GAY9BL,EAZ8BK,EAAA,GAAAI,EAajBL,mBAAS,IAbQM,EAAA5H,OAAAwH,EAAA,EAAAxH,CAAA2H,EAAA,GAa5CY,EAb4CX,EAAA,GAajCT,EAbiCS,EAAA,GAAAG,EAcXT,mBAAS,IAdEU,EAAAhI,OAAAwH,EAAA,EAAAxH,CAAA+H,EAAA,GAc5CwN,EAd4CvN,EAAA,GAc9BwN,EAd8BxN,EAAA,GAAA8G,EAeXxH,oBAAS,GAfEyH,EAAA/O,OAAAwH,EAAA,EAAAxH,CAAA8O,EAAA,GAe5C2G,EAf4C1G,EAAA,GAe9B2G,EAf8B3G,EAAA,GAmB7C3H,EAAqB,SAAC7G,EAAkBoV,GAC3B,OAAbpV,IACF2G,GAAgB,GAChBwO,GAAgB,GAChBF,EAAgBjV,GACZoV,GAAMrV,EAAS4B,EAAaF,EAAKG,WAIzC,OACEoB,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,qBACbhB,EAAApD,EAAAqD,cAACuK,GAAD,CAAY7G,gBAAiBA,EAAiBC,aAAcA,IAC5C,YAAfkO,EACC9R,EAAApD,EAAAqD,cAACgD,GAAD,CACES,iBAAkBA,EAClBC,gBAAiBA,EACjBC,aAAcA,EACdC,mBAAoBA,IAGtB7D,EAAApD,EAAAqD,cAACQ,EAAD,MAEFT,EAAApD,EAAAqD,cAACoS,EAAA,EAAD,CACElS,KAAM4R,EACNO,kBAAgB,sBAChBC,mBAAiB,kBACjBvR,UAAU,gBACViJ,QAAS,kBAAMtG,GAAgB,KAE/B3D,EAAApD,EAAAqD,cAAC8K,GAAD,CAAclH,mBAAoBA,EAAoBmB,UAAWA,KAEnEhF,EAAApD,EAAAqD,cAACN,EAAD,CAAiBG,QAASoS,EAAcnS,WAAYoS,EAAiBtS,QAASmS,2DCvDrE,SAASQ,KAAc,IAAAC,EAE8B9R,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAAnGuC,EAF4BqP,EAE5BrP,aAAcC,EAFcoP,EAEdpP,cAAeyO,EAFDW,EAECX,WAAYY,EAFbD,EAEaC,aACzCnQ,EAAa5B,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAAtD8D,SACFxF,EAAWgE,cAJmB+C,EAOEC,mBAAS,IAPXC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAO7B6O,EAP6B3O,EAAA,GAOhB4O,EAPgB5O,EAAA,GAAAI,EAQYL,oBAAS,GARrBM,EAAA5H,OAAAwH,EAAA,EAAAxH,CAAA2H,EAAA,GAQ7ByO,EAR6BxO,EAAA,GAQXyO,EARWzO,EAAA,GAAAG,EASYT,mBAAS,IATrBU,EAAAhI,OAAAwH,EAAA,EAAAxH,CAAA+H,EAAA,GAS7BuO,EAT6BtO,EAAA,GASXuO,EATWvO,EAAA,GAmCpC,SAASwO,EAAahY,IAdtB,SAAwBiY,GACtB,IAAIC,GAAe,EAGnB,MADmB,KAAfD,EAAIE,SAAeD,GAAe,GAC/BA,GAWHE,CAAepY,EAAQiY,OACzBjY,EAAQiY,IAAoBjY,EAAQiY,IAP3BI,QAAQ,oBAAqB,UASnB,YAAfxB,GAA6C,mBAAjB7W,EAAQC,KACtC6B,EAAS/B,EAAYC,IACG,SAAf6W,GAA0C,mBAAjB7W,EAAQC,MAC1C6B,EAAS1B,EAAmBJ,IAE9B2X,EAAe,KAsCnB,OAtEAhO,oBAAU,WACW,YAAfkN,EACFkB,EAAoB3P,EAAcpF,MAAM,KAAK,IACrB,SAAf6T,GACTkB,EAAoBN,IAErB,CAACZ,EAAYzO,EAAeqP,IA4D/Ba,OAAOC,QAAU,SAACtO,GACZuO,OAAOvO,EAAEmM,OAAOrQ,WAAW0S,SAAS,4BAA4BZ,GAAoB,IAIxF9S,EAAApD,EAAAqD,cAACD,EAAApD,EAAMyM,SAAP,KACErJ,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,wBACfhB,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,0BACbhB,EAAApD,EAAAqD,cAAC0T,GAAA,EAAD,CACEC,aAAW,iBACXC,YAAW,aAAAvW,OAAeyV,GAC1B/R,UAAU,oBACVmQ,MAAOwB,EACPvB,SAAU,SAAAlM,GAAC,OAxBnB,SAAwBA,GACC,OAAnBA,EAAEmM,OAAOF,OAAgByB,EAAe1N,EAAEmM,OAAOF,OAuBhC2C,CAAe5O,IAC9BoM,WAAY,SAAApM,GAAC,OAzCrB,SAAwBA,GACR,UAAVA,EAAExD,KAAoBwD,EAAE6O,WACP,YAAfjC,EACFmB,EAAa,CACX7W,OAAQgH,EACRnH,QAASoH,EACT2Q,KAAMzR,EACN2Q,IAAKP,EACLzX,KAAM,mBAEc,SAAf4W,GACPmB,EAAa,CAAEe,KAAMzR,EAAU0R,GAAIvB,EAAcQ,IAAKP,EAAazX,KAAM,oBA8BtDwU,CAAexK,MAElClF,EAAApD,EAAAqD,cAACiU,GAAAtX,EAAD,CAAYoE,UAAU,4BAA4BY,QAAS,kBAAMkR,GAAqBD,OAExF7S,EAAApD,EAAAqD,cAAA,OAAKe,UAAW6R,EAAmB,+BAAiC,gCAClE7S,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,iBACbhB,EAAApD,EAAAqD,cAACkU,GAAA,EAAD,CAAQC,IAAI,WAAWC,SAAU,SAAAnP,GAAC,OA1B1C,SAA0BA,GACxB0N,EAAeD,EAAczN,EAAEoP,QAC/BxB,GAAoB,GAwBwByB,CAAiBrP,uGCxG3DsP,GAAWC,aAAW,SAAAC,GAAK,MAAK,CACpCC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChB3E,WAAY,SACZ4E,UAAW,SACXC,MAAO,IACPC,WAAY,WAEdC,WAAY,CACVD,WAAY,UACZD,MAAO,QAETG,MAAO,CACLC,UAAW,MACXC,aAAc,OAEhBC,UAAW,CACTC,QAAS,OAEXC,MAAO,CACLxT,OAAQ,WAIG,SAASyT,GAAS7V,GAG/B,IAAMnB,EAAOkC,YAAY,SAAAC,GAAK,OAAIA,EAAMnC,OAClC1B,EAAWgE,cAETwB,EAAiC3C,EAAjC2C,SAAUmT,EAAuB9V,EAAvB8V,mBACZC,EAAUnB,KAPsB1Q,EAQAC,mBAAS,IARTC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAQ/B8R,EAR+B5R,EAAA,GAQlB6R,EARkB7R,EAAA,GA0BtC,OACEhE,EAAApD,EAAAqD,cAACwQ,GAAA,EAAD,CAAMzP,UAAW2U,EAAQhB,MACvB3U,EAAApD,EAAAqD,cAAA,OAAKe,UAAW2U,EAAQT,YACtBlV,EAAApD,EAAAqD,cAAA,OAAK6B,IAAK/G,8BAAsCgH,IAAI,YAAYf,UAAW2U,EAAQR,QACnFnV,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ0O,cAAY,GAAErO,GAC1CvC,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ0O,cAAY,GAAxC,0BAEF5Q,EAAApD,EAAAqD,cAAA,OAAKe,UAAW2U,EAAQL,WACtBtV,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,uBACH8K,MAAK,kBACL2C,YAAW,aAAAvW,OAAeiF,GAC1B4O,MAAOyE,EACPxE,SAAU,SAAClM,GAAD,OAAO2Q,EAAe3Q,EAAEmM,OAAOF,QACzCG,WAAY,SAACpM,GAAD,OA7BG,SAACA,EAAGyK,GACX,UAAVzK,EAAExD,KACJiO,IA2BuBD,CAAexK,EAAG,kBAtBZ,SAAC0Q,EAAarT,GAC7C,IAAM2Q,EAAM,CAAEc,KAAQvV,EAAK8D,SAAU2Q,IAAO0C,EAAa3B,GAAM1R,GAC/DxF,EAAS1B,EAAmB6X,IAC5BnW,EAASsB,EAAW,SACpBtB,EAASyB,EAAa0U,EAAIe,GAAGrK,gBAC7B8L,GAAmB,GAiB8BI,CAAyBF,EAAarT,MACjFL,QAAQ,WACR6T,WAAY,CACV/U,UAAW2U,EAAQH,OAErBQ,gBAAiB,CACfC,QAAQ,OCvEL,SAASC,KAAiB,IAE/BC,EAAmBxV,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAA5DsV,eAF+BrS,EAKOC,oBAAS,GALhBC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAKhCsS,EALgCpS,EAAA,GAKf0R,EALe1R,EAAA,GAAAI,EAMPL,mBAAS,IANFM,EAAA5H,OAAAwH,EAAA,EAAAxH,CAAA2H,EAAA,GAMhC7B,EANgC8B,EAAA,GAMtBgS,EANsBhS,EAAA,GAAAG,EAOPT,mBAAS,MAPFU,EAAAhI,OAAAwH,EAAA,EAAAxH,CAAA+H,EAAA,GAOhCuF,EAPgCtF,EAAA,GAOtB6R,EAPsB7R,EAAA,GAqBvC,OACEzE,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,uBACbhB,EAAApD,EAAAqD,cAACgB,EAAA,EAAD,CAAMD,UAAU,cACdhB,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CAAUF,UAAU,oBAApB,kBACCmV,EAAehV,IAAI,SAAA1C,GAClB,OACEuB,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CAAUS,QAAM,EAACX,UAAU,iBAAiBY,QAAS,SAAAsD,GAAC,OAjBxC,SAACA,EAAQ3C,GAC/B8T,EAAY9T,GACZmT,GAAmB,GACnBY,EAAYpR,EAAEC,eAcoDoR,CAAgBrR,EAAGzG,EAAK+X,aAChFxW,EAAApD,EAAAqD,cAACkC,EAAA,EAAD,CAAgBnB,UAAU,qBACxBhB,EAAApD,EAAAqD,cAAC4B,EAAA,EAAD,KACE7B,EAAApD,EAAAqD,cAAA,OAAK6B,IAAK/G,8BAAsCgH,IAAI,YAAYC,OAAO,OACvEhC,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,uBAGnBhB,EAAApD,EAAAqD,cAACoC,EAAA,EAAD,KAAe5D,EAAK+X,eAM5BxW,EAAApD,EAAAqD,cAACwW,GAAA,EAAD,CACErQ,GAAG,YACHjG,KAAMiW,EACNrM,SAAUA,EACVE,QA3BqB,WACzByL,GAAmB,GACnBY,EAAY,OA0BRlW,aAAc,CACZC,SAAU,SACVC,WAAY,UAGdN,EAAApD,EAAAqD,cAACwV,GAAD,CAAUlT,SAAUA,EAAUmT,mBAAoBA,MC1C3C,SAASgB,KAEtB,IAAMxT,EAAYvC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OACnDwC,EAA4CH,EAA5CG,cAAeqP,EAA6BxP,EAA7BwP,aAAcZ,EAAe5O,EAAf4O,WAHNhO,EAMyBC,oBAAS,GANlCC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAMxB6S,EANwB3S,EAAA,GAMF4S,EANE5S,EAAA,GAAAI,EAO2BL,oBAAS,GAPpCM,EAAA5H,OAAAwH,EAAA,EAAAxH,CAAA2H,EAAA,GAOxByS,EAPwBxS,EAAA,GAODyS,EAPCzS,EAAA,GAAAG,EAQLT,mBAAS,IARJU,EAAAhI,OAAAwH,EAAA,EAAAxH,CAAA+H,EAAA,GAQxB+E,EARwB9E,EAAA,GAQjBsS,EARiBtS,EAAA,GAmB/B,OARAG,oBAAU,WACW,YAAfkN,EACFiF,EAAS1T,EAAcpF,MAAM,KAAK,GAAG2L,eACb,SAAfkI,GACTiF,EAASrE,IAEV,CAACZ,EAAYY,EAAcrP,IAG5BrD,EAAApD,EAAAqD,cAAC+W,GAAA,EAAD,CAAQC,SAAS,SAASjW,UAAU,UAClChB,EAAApD,EAAAqD,cAACiX,GAAA,EAAD,CAASlW,UAAU,UACjBhB,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,CACE0N,KAAK,QACL7G,MAAM,UACNsD,aAAW,OACX5S,UAAU,qBACVY,QAAS,kBAAMgV,GAAwB,KAEvC5W,EAAApD,EAAAqD,cAACmX,GAAAxa,EAAD,OAEFoD,EAAApD,EAAAqD,cAACoX,GAAA,EAAD,CACEC,OAAO,OACPnX,KAAMwW,EACN1M,QAAS,kBAAM2M,GAAwB,IACvCW,OAAQ,kBAAMX,GAAwB,KAEtC5W,EAAApD,EAAAqD,cAAC4R,GAAD,CAASnO,iBAAkBkT,KAE7B5W,EAAApD,EAAAqD,cAACoX,GAAA,EAAD,CACEC,OAAO,QACPnX,KAAM0W,EACN5M,QAAS,kBAAM6M,GAAyB,IACxCS,OAAQ,kBAAMT,GAAyB,KAEvC9W,EAAApD,EAAAqD,cAACiW,GAAD,OAEFlW,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,MAAMqH,EAA1B,KACAvJ,EAAApD,EAAAqD,cAACuX,GAAA,EAAD,CAAMC,KAAK,kDAAkDpG,OAAO,SAASI,MAAO,CAAEnB,MAAO,UAC3FtQ,EAAApD,EAAAqD,cAACqJ,GAAA,EAAD,CAASC,MAAM,0BAA0BvI,UAAU,WACjDhB,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,KACEzJ,EAAApD,EAAAqD,cAACyX,GAAA,EAAD,KACE1X,EAAApD,EAAAqD,cAAA,QAAM0X,EAAE,4vBCxCT,SAASC,KAEtB,IAAM1U,EAAYvC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OACnDuC,EAA0DF,EAA1DE,aAAcC,EAA4CH,EAA5CG,cAAeyO,EAA6B5O,EAA7B4O,WAAYY,EAAiBxP,EAAjBwP,aAHhB5O,EAMaC,oBAAS,GANtBC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAM1BsS,EAN0BpS,EAAA,GAMT0R,EANS1R,EAAA,GAAAI,EAOOL,mBAAS,IAPhBM,EAAA5H,OAAAwH,EAAA,EAAAxH,CAAA2H,EAAA,GAO1ByT,EAP0BxT,EAAA,GAOZyT,EAPYzT,EAAA,GAAAG,EAQOT,oBAAS,GARhBU,EAAAhI,OAAAwH,EAAA,EAAAxH,CAAA+H,EAAA,GAQ1BuT,EAR0BtT,EAAA,GAQZuT,EARYvT,EAAA,GAAA8G,EASDxH,mBAAS,IATRyH,EAAA/O,OAAAwH,EAAA,EAAAxH,CAAA8O,EAAA,GAS1BhJ,EAT0BiJ,EAAA,GAShB6K,EATgB7K,EAAA,GAAAG,EAUD5H,mBAAS,MAVR6H,EAAAnP,OAAAwH,EAAA,EAAAxH,CAAAkP,EAAA,GAU1B5B,EAV0B6B,EAAA,GAUhB0K,EAVgB1K,EAAA,GAa7BqM,EAA4B9R,SAASU,eAAe,2BACpDqR,EAAsB/R,SAASU,eAAe,qBAG9CsR,EAA0B,GAC1BC,EAAiB,EACF,YAAftG,GACFqG,EAAWjV,EAAU/D,QAAQiE,GAAlB,SAA4CC,GACvD+U,EAAiBD,EAAS5N,cAITG,KAFjByN,EAAWjV,EAAUxC,gBAAgBgS,MAGnCyF,EAAW,IAEbC,EAAiBD,EAAS5N,QAI5B3F,oBAAU,WACJqT,GAA6BC,IAC3BH,EACFG,EAAoBG,OAAO,EAAG,IAE9BJ,EAA0BK,eAAe,CAAEC,MAAO,MAAOC,SAAU,aAGtE,CAACT,EAAcI,EAAUD,EAAqBD,IAGjD,IA0BMQ,EAAa,SAACxd,GAClB,OAAOA,EAAQgD,MAAM,OAAO,IAIxBsY,EAAkB,SAACrR,EAAQ3C,GAC/B8T,EAAY9T,GACZmT,GAAmB,GACnBY,EAAYpR,EAAEC,gBAchB,OAJAP,oBAAU,WACR8T,GAAGC,gBAIH3Y,EAAApD,EAAAqD,cAAA,OACEmG,GAAG,oBACHpF,UAAU,qBACV4X,SAAU,SAAA1T,GAAC,OA9CS,SAACA,GACvB,IAAM2T,EAAU3T,EAAEmM,OACdwH,EAAQC,UAAY,IACtBd,GAAgB,GAEQ,IAAtBa,EAAQC,WACNV,EAAiBP,GACnBrX,WAAW,WACTwX,GAAgB,GAEdF,EADED,EAAe,GAAKO,EACNA,EAEAP,EAAe,KAEhC,KAgCUkB,CAAgB7T,IAC/B8T,IAAK,SAAAH,GAAO,OAAKX,EAAsBW,IAEtCT,GAAkBP,EACjB7X,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,sBACbhB,EAAApD,EAAAqD,cAACgZ,GAAA,EAAD,CAAkB3I,MAAM,aAExB,KACJtQ,EAAApD,EAAAqD,cAACgB,EAAA,EAAD,KACgB,OAAbkX,EACGA,EAASe,MAAMd,EAAiBP,EAAcO,GAAgBjX,IAAI,SAAClG,EAASoG,GAE1E,OACErB,EAAApD,EAAAqD,cAACkZ,GAAA,EAAD,CAAM3X,IAAI,EAAMC,QAAS,KACvBzB,EAAApD,EAAAqD,cAACiB,EAAA,EAAD,CAAUF,UAAU,UAAUU,IAAKL,GACjCrB,EAAApD,EAAAqD,cAACkC,EAAA,EAAD,CAAgBnB,UAAU,qBACxBhB,EAAApD,EAAAqD,cAAC4B,EAAA,EAAD,KACE7B,EAAApD,EAAAqD,cAAA,OACE2B,QAAS,SAAAsD,GAAC,OAAIqR,EAAgBrR,EAAGjK,EAAQ+Y,OACzClS,IAAK/G,8BACLgH,IAAI,YACJC,OAAO,SAzEP,SAAC/G,GACvB,SAAIA,EAAQme,WAAW,SAAUne,EAAQoe,SAAS,QA4EjCC,CAAgBre,EAAQiY,KACvBlT,EAAApD,EAAAqD,cAACoC,EAAA,EAAD,CACEC,QACEtC,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,eAAeY,QAAS,SAAAsD,GAAC,OAAIqR,EAAgBrR,EAAGjK,EAAQ+Y,QACpE/Y,EAAQ+Y,KAAKpK,cACd5J,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,gBAAf,MAAA1D,OAAqCic,KAAOte,EAAQue,MAAMC,OAAO,UAGrEC,UACE1Z,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,eACbhB,EAAApD,EAAAqD,cAAA,OAAK0Z,wBAAyB,CAAEC,OAAQnB,EAAWxd,EAAQiY,SAG/DlS,UAAU,iBAGZhB,EAAApD,EAAAqD,cAACoC,EAAA,EAAD,CACEC,QACEtC,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,eAAeY,QAAS,SAAAsD,GAAC,OAAIqR,EAAgBrR,EAAGjK,EAAQ+Y,QACpE/Y,EAAQ+Y,KAAKpK,cACd5J,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,gBAAf,MAAA1D,OAAqCic,KAAOte,EAAQue,MAAMC,OAAO,UAGrEC,UAAWze,EAAQiY,IACnBlS,UAAU,qBAOtB,MAENhB,EAAApD,EAAAqD,cAAA,OAAK+Y,IAAK,SAAAH,GAAO,OAAKZ,EAA4BY,GAAUzS,GAAG,4BAC/DpG,EAAApD,EAAAqD,cAACwW,GAAA,EAAD,CACErQ,GAAG,YACHjG,KAAMiW,EACNrM,SAAUA,EACVE,QA7EqB,WACzByL,GAAmB,GACnBY,EAAY,OA4ERlW,aAAc,CACZC,SAAU,SACVC,WAAY,UAGdN,EAAApD,EAAAqD,cAACwV,GAAD,CAAUlT,SAAUA,EAAUmT,mBAAoBA,MCjL3C,SAASmE,KAEtB,IAAMpb,EAAOkC,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAC9C2E,EAAiBzC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAA1DuC,aACFrG,EAAWgE,cA2BjB,OAfA6D,oBAAU,WACHnG,EAAK+G,YAGRzI,EAAS4B,EAAaF,EAAKG,SAZJ,SAArBkb,IACJ/c,EAASe,KACTf,EAAST,EAAqB8G,EAAanF,MAAM,KAAK,KACtDuC,WAAWsZ,EAAoB,KAU7BA,IAHApa,EAAkBqa,KAAK,MAKxB,CAAChd,EAAU0B,EAAK+G,WAAY/G,EAAKG,SAGpC2U,OAAOyG,iBAAiB,SAAU,WAChC,IAAIC,EAA0B,IAArB1G,OAAO2G,YAChB/T,SAASgU,gBAAgB1I,MAAM2I,YAAY,OAA3C,GAAA9c,OAAsD2c,EAAtD,SAIAja,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,aACbhB,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,kBACbhB,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,gBACbhB,EAAApD,EAAAqD,cAAC4R,GAAD,OAGF7R,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,iBACbhB,EAAApD,EAAAqD,cAACyW,GAAD,MACA1W,EAAApD,EAAAqD,cAAC2X,GAAD,OAGF5X,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,kBACbhB,EAAApD,EAAAqD,cAACiW,GAAD,OAGFlW,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,sBACbhB,EAAApD,EAAAqD,cAACuS,GAAD,iCCvCK,SAAS6H,KAEtB,IAAMtd,EAAWgE,cAFY+C,EAKSC,oBAAS,GALlBC,EAAAvH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,GAKtBmH,EALsBjH,EAAA,GAKTkH,EALSlH,EAAA,GAAAI,EAMkBL,mBAAS,QAN3BM,EAAA5H,OAAAwH,EAAA,EAAAxH,CAAA2H,EAAA,GAMtB+G,EANsB9G,EAAA,GAMP+G,EANO/G,EAAA,GAAAG,EAOaT,oBAAS,GAPtBU,EAAAhI,OAAAwH,EAAA,EAAAxH,CAAA+H,EAAA,GAOtB6G,EAPsB5G,EAAA,GAOP6G,EAPO7G,EAAA,GAAA8G,EAQsBxH,mBAAS,QAR/ByH,EAAA/O,OAAAwH,EAAA,EAAAxH,CAAA8O,EAAA,GAQtBE,EARsBD,EAAA,GAQLE,EARKF,EAAA,GAAAG,EASW5H,oBAAS,GATpB6H,EAAAnP,OAAAwH,EAAA,EAAAxH,CAAAkP,EAAA,GAStB2O,EATsB1O,EAAA,GASR2O,EATQ3O,EAAA,GAAAG,EAUoBhI,mBAAS,QAV7BiI,EAAAvP,OAAAwH,EAAA,EAAAxH,CAAAsP,EAAA,GAUtByO,EAVsBxO,EAAA,GAUNyO,EAVMzO,EAAA,GAAAG,EAWGpI,mBAAS,IAXZqI,EAAA3P,OAAAwH,EAAA,EAAAxH,CAAA0P,EAAA,GAWtB5J,EAXsB6J,EAAA,GAWZiK,EAXYjK,EAAA,GAAAG,EAYaxI,oBAAS,GAZtByI,EAAA/P,OAAAwH,EAAA,EAAAxH,CAAA8P,EAAA,GAYtBmO,EAZsBlO,EAAA,GAYPmO,EAZOnO,EAAA,GAAAE,EAamB3I,mBAAS,IAb5B4I,EAAAlQ,OAAAwH,EAAA,EAAAxH,CAAAiQ,EAAA,GAatBkO,EAbsBjO,EAAA,GAaJkO,EAbIlO,EAAA,GAAAmO,EAcG/W,mBAAS,IAdZgX,EAAAte,OAAAwH,EAAA,EAAAxH,CAAAqe,EAAA,GActBE,EAdsBD,EAAA,GAcZE,EAdYF,EAAA,GAAAG,GAeanX,oBAAS,GAftBoX,GAAA1e,OAAAwH,EAAA,EAAAxH,CAAAye,GAAA,GAetBE,GAfsBD,GAAA,GAePE,GAfOF,GAAA,GAAAG,GAgBmBvX,mBAAS,IAhB5BwX,GAAA9e,OAAAwH,EAAA,EAAAxH,CAAA6e,GAAA,GAgBtBE,GAhBsBD,GAAA,GAgBJE,GAhBIF,GAAA,GAAAG,GAiBO3X,oBAAS,GAjBhB4X,GAAAlf,OAAAwH,EAAA,EAAAxH,CAAAif,GAAA,GAiBtBE,GAjBsBD,GAAA,GAiBVE,GAjBUF,GAAA,GAoBvBG,GAAW,WACf1Q,EAAiB,QACjBF,GAAe,GACfI,GAAiB,GACjBI,EAAmB,SACnB6O,GAAgB,GAChBE,EAAkB,UAoBd/K,GAAiB,SAACxK,EAAkBoF,GAC1B,UAAVpF,EAAExD,KACJ4I,KAKEyR,GAAiB,SAACxZ,EAAkByY,EAAkB1Q,GAC1D,IAAI0R,GAAQ,EACK,KAAbzZ,GACFoY,GAAiB,GACjBE,EAAoB,wBACpBmB,GAAQ,GACHrB,GAAiB,GACpBK,EAASzQ,OAAS,GACpB8Q,IAAiB,GACjBI,GAAoB,kCACpBO,GAAQ,GACHX,IAAiB,GAEnBW,GACH1R,KAKE2R,GAAmB,eAAAzf,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOyF,EAAkByY,GAAzB,IAAAhe,EAAAkf,EAAA,OAAAvf,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAGxBoF,EAAW4Z,mBAAmB5Z,GAC9ByY,EAAWmB,mBAAmBnB,GAJN9d,EAAAE,KAAA,EAMDxC,EAAMoS,KAAN,yBAAA1P,OAAoCiF,EAApC,cAAAjF,OAAyD0d,IANxD,OAMlBhe,EANkBE,EAAAK,KAOpBqe,IACFnZ,aAAa2Z,QAAQ,OAAQC,KAAKC,UAAUtf,EAASxB,OAEvDuB,EAASuC,EAAOtC,EAASxB,OACzBkE,EAAkBqa,KAAK,cAXC7c,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA+P,GAAA/P,EAAA,UAalBgf,EAAYhf,EAAA+P,GAAIjQ,SAASxB,QAE7Bmf,GAAiB,GACjBE,EAAoBqB,IAhBE,yBAAAhf,EAAAO,SAAAX,EAAA,kBAAH,gBAAAY,EAAA2B,GAAA,OAAA7C,EAAAmB,MAAAC,KAAAC,YAAA,GAsBnB0e,GAAkB,eAAA1d,EAAApC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAiC,EAAOyD,EAAkByY,GAAzB,IAAAhe,EAAAkf,EAAA,OAAAvf,EAAAC,EAAAK,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAEzBmF,EAAW4Z,mBAAmB5Z,GAC9ByY,EAAWmB,mBAAmBnB,GAHL/b,EAAA9B,KAAA,EAAA8B,EAAA7B,KAAA,EAMAxC,EAAMyC,IAAN,wBAAAC,OAAkCiF,EAAlC,cAAAjF,OAAuD0d,IANvD,OAMjBhe,EANiBiC,EAAA1B,KAOnBqe,IACFnZ,aAAa2Z,QAAQ,OAAQC,KAAKC,UAAUtf,EAASxB,OAEvDuB,EAASuC,EAAOtC,EAASxB,OACzBkE,EAAkBqa,KAAK,cAXA9a,EAAA7B,KAAA,iBAAA6B,EAAA9B,KAAA,GAAA8B,EAAAgO,GAAAhO,EAAA,UAajBid,EAAYjd,EAAAgO,GAAIjQ,SAASxB,QAE7Bmf,GAAiB,GACjBE,EAAoBqB,GACpBb,IAAiB,GACjBI,GAAoBS,IAlBC,yBAAAjd,EAAAxB,SAAAqB,EAAA,kBAAH,gBAAAsO,EAAAC,GAAA,OAAAxO,EAAAlB,MAAAC,KAAAC,YAAA,GAqNxB,OACEmC,EAAApD,EAAAqD,cAAA,OAAKe,UAAU,gBACbhB,EAAApD,EAAAqD,cAAC2P,GAAA,EAAD,CAAO5O,UAAU,oBA7LjBhB,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAW4J,EAAe3J,GAAIyJ,EAAaxJ,QAAS,IAAKoO,cAAY,EAACC,eAAa,GACxF9P,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,GAAIH,GAAI,IACrBrQ,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,mCAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,EAAGH,GAAI,IACpBrQ,EAAApD,EAAAqD,cAACwQ,GAAA,EAAD,CAAMzP,UAAU,aACdhB,EAAApD,EAAAqD,cAACyQ,GAAA,EAAD,CAAgB9O,QAAS,kBAlGnC8J,EAAmB,QACnBN,EAAiB,SACjBE,GAAiB,QACjBJ,GAAe,KAgGHlL,EAAApD,EAAAqD,cAAC0Q,GAAA,EAAD,KACE3Q,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUM,cAAY,GAArD,UAGA5Q,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAArC,yBAGA7Q,EAAApD,EAAAqD,cAAC6Q,GAAA,EAAD,KACE9Q,EAAApD,EAAAqD,cAAC+Q,GAAA,EAAD,CAAUhQ,UAAU,qBAEtBhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CAAQN,QAAQ,YAAYoO,MAAM,WAAlC,cAORtQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,EAAGH,GAAI,IACpBrQ,EAAApD,EAAAqD,cAACwQ,GAAA,EAAD,CAAMzP,UAAU,aACdhB,EAAApD,EAAAqD,cAACyQ,GAAA,EAAD,CAAgB9O,QAAS,kBA9GnC6Y,EAAkB,QAClBrP,EAAiB,SACjBmP,GAAgB,QAChBrP,GAAe,KA4GHlL,EAAApD,EAAAqD,cAAC0Q,GAAA,EAAD,KACE3Q,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,YAAYM,cAAY,GAAvD,SAGA5Q,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ2O,WAAS,GAArC,mCAGA7Q,EAAApD,EAAAqD,cAAC6Q,GAAA,EAAD,KACE9Q,EAAApD,EAAAqD,cAACmC,EAAA,EAAD,CAAQpB,UAAU,qBAEpBhB,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CAAQN,QAAQ,YAAYoO,MAAM,aAAlC,QACQ,WAcpBtQ,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAWkK,EAAiBjK,GAAI6J,EAAe5J,QAAS,IAAKoO,cAAY,EAACC,eAAa,GAC5F9P,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,CAAY7H,QAASka,IACnB9b,EAAApD,EAAAqD,cAACuc,GAAA,EAAD,OAEFxc,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,mBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,WACH8K,MAAM,WACNC,MAAO5O,EACPyZ,MAAOtB,EACP+B,WAAY7B,EACZxJ,SAAU,SAAAlM,GAAC,OAAImR,EAAYnR,EAAEmM,OAAOF,QACpCI,OAAO,QACPC,aAAa,MACbtP,QAAQ,WACRoP,WAAY,SAAApM,GAAC,OACXwK,GAAexK,EAAG,kBAChB6W,GAAexZ,EAAUyY,EAAU,kBAAMiB,GAAoB1Z,EAAUyY,WAK/Ehb,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,WACH8K,MAAM,WACNhW,KAAK,WACLiW,MAAO6J,EACPgB,MAAOZ,GACPqB,WAAYjB,GACZpK,SAAU,SAAAlM,GAAC,OAAI+V,EAAY/V,EAAEmM,OAAOF,QACpCI,OAAO,QACPC,aAAa,MACbtP,QAAQ,WACRoP,WAAY,SAAApM,GAAC,OACXwK,GAAexK,EAAG,kBAChB6W,GAAexZ,EAAUyY,EAAU,kBAAMiB,GAAoB1Z,EAAUyY,WAK/Ehb,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAAA,0BACcD,EAAApD,EAAAqD,cAACyc,GAAA,EAAD,CAAUvL,MAAOyK,GAAYxK,SAAU,SAAAlM,GAAC,OAAI2W,GAAc3W,EAAEmM,OAAOsL,aAEjF3c,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACEN,QAAQ,YACRoO,MAAM,UACN1O,QAAS,kBAAMma,GAAexZ,EAAUyY,EAAU,kBAAMiB,GAAoB1Z,EAAUyY,OAHxF,aAgBNhb,EAAApD,EAAAqD,cAACqB,EAAA,EAAD,CAAOC,UAAWiZ,EAAgBhZ,GAAI8Y,EAAc7Y,QAAS,IAAKoO,cAAY,EAACC,eAAa,GAC1F9P,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtDnQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbrQ,EAAApD,EAAAqD,cAACwJ,GAAA,EAAD,CAAY7H,QAASka,IACnB9b,EAAApD,EAAAqD,cAACuc,GAAA,EAAD,OAEFxc,EAAApD,EAAAqD,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKoO,MAAM,UAAUC,MAAM,UAA/C,kBAIFvQ,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,WACH8K,MAAM,WACNC,MAAO5O,EACPyZ,MAAOtB,EACP+B,WAAY7B,EACZxJ,SAAU,SAAAlM,GAAC,OAAImR,EAAYnR,EAAEmM,OAAOF,QACpCI,OAAO,QACPC,aAAa,MACbtP,QAAQ,WACRoP,WAAY,SAAApM,GAAC,OACXwK,GAAexK,EAAG,kBAChB6W,GAAexZ,EAAUyY,EAAU,kBAAMuB,GAAmBha,EAAUyY,WAK9Ehb,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,kBAC3BhB,EAAApD,EAAAqD,cAACgR,GAAA,EAAD,CACE7K,GAAG,WACH8K,MAAM,WACNhW,KAAK,WACLiW,MAAO6J,EACPgB,MAAOZ,GACPqB,WAAYjB,GACZpK,SAAU,SAAAlM,GAAC,OAAI+V,EAAY/V,EAAEmM,OAAOF,QACpCI,OAAO,QACPC,aAAa,MACbtP,QAAQ,WACRoP,WAAY,SAAApM,GAAC,OACXwK,GAAexK,EAAG,kBAChB6W,GAAexZ,EAAUyY,EAAU,kBAAMuB,GAAmBha,EAAUyY,WAK9Ehb,EAAApD,EAAAqD,cAAC8P,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIrP,UAAU,eAC3BhB,EAAApD,EAAAqD,cAAA,0BACcD,EAAApD,EAAAqD,cAACyc,GAAA,EAAD,CAAUvL,MAAOyK,GAAYxK,SAAU,SAAAlM,GAAC,OAAI2W,GAAc3W,EAAEmM,OAAOsL,aAEjF3c,EAAApD,EAAAqD,cAACuC,EAAA,EAAD,CACExB,UAAU,qBACVkB,QAAQ,YACRoO,MAAM,UACN1O,QAAS,kBAAMma,GAAexZ,EAAUyY,EAAU,kBAAMuB,GAAmBha,EAAUyY,OAJvF,cCtRG4B,OAzBf,WAEE,IAAM7f,EAAWgE,cAYjB,OACEf,EAAApD,EAAAqD,cAAC4c,EAAA,EAAD,CAAenI,MAAOA,IACpB1U,EAAApD,EAAAqD,cAAC6c,EAAA,EAAD,KAV0B,WAC5B,IAAIre,EAAO4d,KAAKU,MAAMta,aAAaua,QAAQ,SACvCve,IACF1B,EAASuC,EAAOb,IAChBiB,EAAkBqa,KAAK,eAOpBkD,GACDjd,EAAApD,EAAAqD,cAACid,EAAA,EAAD,CAAOC,KAAK,aAAaC,OAAK,EAACC,UAAWxD,KAC1C7Z,EAAApD,EAAAqD,cAACid,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWhD,QAQnC3F,GAAQ4I,YAAe,CAC3BC,UAAW,CACTC,WAAY,CACVC,QAAS,CACPC,SAAU,OACVhM,gBAAiB,UAGrBiM,mBAAoB,CAClBC,KAAM,CACJlM,gBAAiB,UACjBpB,MAAO,UAGXuN,UAAW,CACTC,aAAc,CACZpM,gBAAiB,UACjBuF,SAAU,cAIhB8G,QAAS,CACP7iB,KAAM,OACNoH,QAAS,CACP0b,KAAM,WAERtE,UAAW,CACTsE,KAAM,YAGVC,WAAY,CACVC,WAAY,6CACZR,SAAU,GACVS,gBAAiB,IACjBC,kBAAmB,IACnBC,iBAAkB,4CClDhBC,GAAe,CACnBnf,QAAS,CACPof,qBAAsB,CACpBpb,SAAU,CACRqb,qBAAsB,MAI5B9d,gBAAiB,GACjB0C,aAAc,qBACdC,cAAe,qBACf8S,eAAgB,GAChBrE,WAAY,UACZY,aAAc,OACdpP,aAAc,CAAC,CAAE1E,OAAQ,GAAI2D,SAAU,KACvCgB,gBAAiB,GACjBE,iBAAkB,GAClBD,cAAe,CAAE5E,OAAQ,KChCrB0f,GAAe,CACnB9Y,YAAY,EACZd,SAAS,EACT9F,OAAQ,GACR2D,SAAU,aCJGkc,8BAA4B,CACzC5d,KFkCyB,WAAyE,IAAxED,EAAwE/C,UAAA0M,OAAA,QAAAG,IAAA7M,UAAA,GAAAA,UAAA,GAArDygB,GAAcI,EAAuC7gB,UAAA0M,OAAA,EAAA1M,UAAA,QAAA6M,EAClG,OAAQgU,EAAOxjB,MACb,KAAKP,EAAOgkB,uBAAZ,IAAAC,EAC6CF,EAAOtjB,QAA5CgB,EADRwiB,EACQxiB,OAAQH,EADhB2iB,EACgB3iB,QAAS+X,EADzB4K,EACyB5K,KAAMd,EAD/B0L,EAC+B1L,IAAKsG,EADpCoF,EACoCpF,KAClC,OAAO/c,OAAAoiB,GAAA,EAAApiB,CAAA,GACFmE,EADL,CAEEzB,QAAQ1C,OAAAoiB,GAAA,EAAApiB,CAAA,GACHmE,EAAMzB,QADJ1C,OAAAqiB,GAAA,EAAAriB,CAAA,GAEJL,EAFIK,OAAAoiB,GAAA,EAAApiB,CAAA,GAGAmE,EAAMzB,QAAQ/C,GAHd,CAIH+G,SAAS1G,OAAAoiB,GAAA,EAAApiB,CAAA,GACJmE,EAAMzB,QAAQ/C,GAAQ+G,SADnB1G,OAAAqiB,GAAA,EAAAriB,CAAA,GAELR,EAFK,GAAAqB,OAAAb,OAAAsiB,GAAA,EAAAtiB,CAESmE,EAAMzB,QAAQ/C,GAAd,SAAkCH,IAF3C,CAEqD,CAAE+X,KAAMA,EAAMd,IAAKA,EAAKsG,KAAMA,aAKnG,KAAK7e,EAAOqkB,+BACV,OAAIpe,EAAMF,gBAAgBge,EAAOtjB,QAAQqD,MAChChC,OAAAoiB,GAAA,EAAApiB,CAAA,GACFmE,EADL,CAEEF,gBAAgBjE,OAAAoiB,GAAA,EAAApiB,CAAA,GACXmE,EAAMF,gBADIjE,OAAAqiB,GAAA,EAAAriB,CAAA,GAEZiiB,EAAOtjB,QAAQqD,KAFH,GAAAnB,OAAAb,OAAAsiB,GAAA,EAAAtiB,CAGRmE,EAAMF,gBAAgBge,EAAOtjB,QAAQqD,OAH7B,CAIX,CAAEuV,KAAM0K,EAAOtjB,QAAQ4Y,KAAMC,GAAIyK,EAAOtjB,QAAQ6Y,GAAIf,IAAKwL,EAAOtjB,QAAQ8X,IAAKsG,KAAMkF,EAAOtjB,QAAQoe,YAKxG/c,OAAAoiB,GAAA,EAAApiB,CAAA,GACKmE,EADL,CAEEF,gBAAgBjE,OAAAoiB,GAAA,EAAApiB,CAAA,GACXmE,EAAMF,gBADIjE,OAAAqiB,GAAA,EAAAriB,CAAA,GAEZiiB,EAAOtjB,QAAQqD,KAAO,CACrB,CAAEuV,KAAM0K,EAAOtjB,QAAQ4Y,KAAMC,GAAIyK,EAAOtjB,QAAQ6Y,GAAIf,IAAKwL,EAAOtjB,QAAQ8X,IAAKsG,KAAMkF,EAAOtjB,QAAQoe,WAI5G,KAAK7e,EAAOskB,0BACV,OAAOxiB,OAAAoiB,GAAA,EAAApiB,CAAA,GACFmE,EADL,CAEE0C,aAAcob,EAAOtjB,QAAQ8L,QAC7B3D,gBAAiBmb,EAAOtjB,QAAQwD,OAChC6E,iBAAkB,KAEtB,KAAK9I,EAAOukB,0BACV,OAAOziB,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmB4C,cAAekb,EAAOtjB,UAC3C,KAAKT,EAAOwkB,2BACV,OAAO1iB,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmB6C,iBAAkBib,EAAOtjB,QAAQwD,OAAQ0E,aAAcob,EAAOtjB,QAAQ8L,UAC3F,KAAKvM,EAAOoB,uBACV,OAAOU,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmB0C,aAAc,GAAIG,iBAAkB,GAAIF,gBAAiB,KAC9E,KAAK5I,EAAOuB,YACV,OAAOO,OAAAoiB,GAAA,EAAApiB,CAAA,GACFmE,EADL,CAEEzB,QAAQ1C,OAAAoiB,GAAA,EAAApiB,CAAA,GACHmE,EAAMzB,QADJ1C,OAAAqiB,GAAA,EAAAriB,CAAA,GAEJiiB,EAAOtjB,QAAQgB,OAFXK,OAAAoiB,GAAA,EAAApiB,CAAA,GAGAmE,EAAMzB,QAAQuf,EAAOtjB,QAAQgB,QAH7B,CAIH+G,SAAS1G,OAAAoiB,GAAA,EAAApiB,CAAA,GACJmE,EAAMzB,QAAQuf,EAAOtjB,QAAQgB,QAAQ+G,SADlC1G,OAAAqiB,GAAA,EAAAriB,CAAA,GAELiiB,EAAOtjB,QAAQa,QAAU,WAKpC,KAAKtB,EAAO0B,WACV,OAAOI,OAAAoiB,GAAA,EAAApiB,CAAA,GACFmE,EADL,CAEEzB,QAAQ1C,OAAAoiB,GAAA,EAAApiB,CAAA,GACHmE,EAAMzB,QADJ1C,OAAAqiB,GAAA,EAAAriB,CAAA,GAEJiiB,EAAOtjB,QAAQgB,OAAS,CACvB+G,SAAS1G,OAAAqiB,GAAA,EAAAriB,CAAA,GACNiiB,EAAOtjB,QAAQa,QAAU,SAKpC,KAAKtB,EAAOyE,iBACV,OAAO3C,OAAAoiB,GAAA,EAAApiB,CAAA,GACFmE,EADL,CAEEzB,QAASuf,EAAOtjB,QAAQ+D,QACxBuB,gBAAiBge,EAAOtjB,QAAQsF,gBAChC0C,aAAc3G,OAAOyC,KAAKwf,EAAOtjB,QAAQ+D,SAAS,GAClDkE,cAAe5G,OAAOyC,KAAK0B,EAAMzB,QAAQ1C,OAAOyC,KAAKwf,EAAOtjB,QAAQ+D,SAAS,IAAIgE,UAAU,KAE/F,KAAKxI,EAAOuD,cACV,OAAOzB,OAAAoiB,GAAA,EAAApiB,CAAA,GACFmE,EADL,CAEEwC,aAAcsb,EAAOtjB,QACrBiI,cAAe5G,OAAOyC,KAAK0B,EAAMzB,QAAQuf,EAAOtjB,SAAS+H,UAAU,KAEvE,KAAKxI,EAAOyD,eACV,OAAO3B,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmByC,cAAeqb,EAAOtjB,UAC3C,KAAKT,EAAO4D,YACV,OAAO9B,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmBkR,WAAY4M,EAAOtjB,QAASsX,aAAcjW,OAAOyC,KAAK0B,EAAMF,iBAAiB,KAClG,KAAK/F,EAAO+D,eACV,OAAOjC,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmB8R,aAAcgM,EAAOtjB,UAC1C,KAAKT,EAAO6C,oBACV,OAAOf,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmBuV,eAAgBuI,EAAOtjB,UAC5C,QACE,OAAOqB,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,KEtIhBnC,KDKyB,WAAyE,IAAxEmC,EAAwE/C,UAAA0M,OAAA,QAAAG,IAAA7M,UAAA,GAAAA,UAAA,GAArDygB,GAAcI,EAAuC7gB,UAAA0M,OAAA,EAAA1M,UAAA,QAAA6M,EAClG,OAAQgU,EAAOxjB,MACb,KAAKP,EAAO4E,QACV,OAAO9C,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmB4E,YAAY,EAAM5G,OAAQ8f,EAAOtjB,QAAQwD,OAAQ2D,SAAUmc,EAAOtjB,QAAQmH,WAC/F,KAAK5H,EAAO8E,SACV,OAAOhD,OAAAoiB,GAAA,EAAApiB,CAAA,GAAKmE,EAAZ,CAAmB4E,YAAY,EAAO5G,OAAQ,GAAI2D,SAAU,GAAImC,SAAS,IAC3E,QACE,OAAO9D,qCEbb,ICJiCwe,GDM3BC,GAAQC,uBAAYC,GAAUC,+BAAoBC,2BAAgBC,MCNvCN,GDIkDrkB,iDCH1E,SAAC4kB,GACN,IAAIC,EAASC,KAAGT,IAKhB,OAAO,SAAChiB,GAAD,OAA+B,SAACshB,GAErC,GAAIA,EAAOxjB,OAASP,EAAOQ,oBAA3B,CAMA,GAAIujB,EAAOxjB,OAASP,EAAOW,4BAA3B,CAaA,GAPIojB,EAAOxjB,OAASP,EAAO4E,UACzBqgB,EAAOE,KAAK,sBAAuBpB,EAAOtjB,SAmDlD,SAA6BwkB,EAA+BD,GACnDC,EAAOG,GAAG,SAAU,SAACrB,GAEN,YAAhBA,EAAOxjB,KACTykB,EAAS5iB,SAAS,CAChB7B,KAAMP,EAAOgkB,uBACbvjB,QAASsjB,EAAOtjB,UAEO,oBAAhBsjB,EAAOxjB,KAChBykB,EAAS5iB,SAAS,CAChB7B,KAAMP,EAAOqkB,+BACb5jB,QAASsjB,EAAOtjB,UAEO,oBAAhBsjB,EAAOxjB,KAChBykB,EAAS5iB,SAAS,CAChB7B,KAAMP,EAAOskB,0BACb7jB,QAASsjB,EAAOtjB,UAEO,qBAAhBsjB,EAAOxjB,KAChBykB,EAAS5iB,SAAS,CAChB7B,KAAMP,EAAOwkB,2BACb/jB,QAASsjB,EAAOtjB,UAEO,iBAAhBsjB,EAAOxjB,MAChBykB,EAAS5iB,SAAS,CAChB7B,KAAMP,EAAOukB,0BACb9jB,QAASsjB,EAAOtjB,YA5EL4kB,CAAoBJ,EAAQD,IAKrCjB,EAAOxjB,OAASP,EAAOyE,iBAAkB,CAE3C,IAAID,EAAU1C,OAAOyC,KAAKwf,EAAOtjB,QAAQ+D,SACrC8gB,EAAsB,GAC1B9gB,EAAQgI,QAAQ,SAAC/K,EAAQiF,GACvB4e,EAAU5e,GAAKjF,EAAO6B,MAAM,KAAK,KAInCgiB,EAAU9Y,QAAQ,SAAA5K,GAChBqjB,EAAOE,KAAK,YAAavjB,KAK7B,GAAImiB,EAAOxjB,OAASP,EAAO0B,WAAY,CACrC,IAAIE,EAAWmiB,EAAOtjB,QAAQgB,OAAO6B,MAAM,KAAK,GAChD2hB,EAAOE,KAAK,YAAavjB,GAoB3B,OAhBImiB,EAAOxjB,OAASP,EAAOoD,qBACzB6hB,EAAOE,KAAK,iBAGVpB,EAAOxjB,OAASP,EAAOc,wBACzBmkB,EAAOE,KAAK,kBAAmBpB,EAAOtjB,SAGpCsjB,EAAOxjB,OAASP,EAAOkB,yBACzB+jB,EAAOE,KAAK,mBAAoBpB,EAAOtjB,SAGrCsjB,EAAOxjB,OAASP,EAAOgB,wBACzBikB,EAAOE,KAAK,eAAgBpB,EAAOtjB,SAG9BgC,EAAKshB,GAjDVkB,EAAOE,KAAK,8BAA+BpB,EAAOtjB,cANlDwkB,EAAOE,KAAK,sBAAuBpB,EAAOtjB,gBDFlD8kB,IAASC,OACPngB,EAAApD,EAAAqD,cAACmgB,EAAA,EAAD,CAAUf,MAAOA,IACfrf,EAAApD,EAAAqD,cAACogB,GAAD,OAEFla,SAASU,eAAe","file":"static/js/main.60d0aaed.chunk.js","sourcesContent":["export enum ACTION {\n  RECEIVE_SOCKET_MESSAGE,\n  RECEIVE_SOCKET_PRIVATE_MESSAGE,\n  RECEIVE_SOCKET_JOIN_VOICE,\n  RECEIVE_SOCKET_RTC_SIGNAL,\n  RECEIVE_SOCKET_LEAVE_VOICE,\n  SEND_SOCKET_MESSAGE,\n  SEND_SOCKET_PRIVATE_MESSAGE,\n  SEND_SOCKET_JOIN_VOICE,\n  SEND_SOCKET_RTC_SIGNAL,\n  SEND_SOCKET_LEAVE_VOICE,\n  ADD_SERVER,\n  ADD_PRIVATE_MESSAGE,\n  ADD_CHANNEL,\n  CHANGE_CHANNEL,\n  CHANGE_SERVER,\n  CHANGE_VIEW,\n  CHANGE_PM_USER,\n  CLEAR_VOICE_CONNECTION,\n  UPDATE_ACTIVE_USERS,\n  UPDATE_ACTIVE_STATE,\n  SIGN_IN,\n  SIGN_OUT,\n  GET_INITIAL_DATA\n}\n\nexport type ChatActionTypes =\n  | ReceiveMessageAction\n  | ReceivePrivateMessageAction\n  | ReceiveJoinVoiceAction\n  | ReceiveRtcSignalAction\n  | ReceiveLeaveVoiceAction\n  | ClearVoiceConnectionAction\n  | AddChannelAction\n  | AddServerAction\n  | ChangeServerAction\n  | ChangeChannelAction\n  | ChangeViewAction\n  | ChangePmUserAction\n  | LoadUserDataAction\n  | UpdateActiveUsersAction;\n\nexport type SocketActions =\n  | SendMessageAction\n  | SendPrivateMessageAction\n  | SignInAction\n  | LoadUserDataAction\n  | AddServerAction\n  | UpdateActiveStateAction\n  | SendJoinVoiceAction\n  | SendRtcSignalAction\n  | SendLeaveVoiceAction;\n\nexport type UserActionTypes = SignInAction | SignOutAction;\n\n/* Actions Types */\nexport type SendMessageAction = {\n  type: ACTION.SEND_SOCKET_MESSAGE;\n  payload: SendMessageData;\n};\n\nexport type ReceiveMessageAction = {\n  type: ACTION.RECEIVE_SOCKET_MESSAGE;\n  payload: ReceiveMessageData;\n};\n\nexport type SendPrivateMessageAction = {\n  type: ACTION.SEND_SOCKET_PRIVATE_MESSAGE;\n  payload: SendPrivateMessageData;\n};\n\nexport type ReceivePrivateMessageAction = {\n  type: ACTION.RECEIVE_SOCKET_PRIVATE_MESSAGE;\n  payload: ReceivePrivateMessageData;\n};\n\nexport type SendJoinVoiceAction = {\n  type: ACTION.SEND_SOCKET_JOIN_VOICE;\n  payload: SendJoinVoiceData;\n};\n\nexport type ReceiveJoinVoiceAction = {\n  type: ACTION.RECEIVE_SOCKET_JOIN_VOICE;\n  payload: ReceiveJoinVoiceData;\n};\n\nexport type SendLeaveVoiceAction = {\n  type: ACTION.SEND_SOCKET_LEAVE_VOICE;\n  payload: SendLeaveVoiceData;\n};\n\nexport type ReceiveLeaveVoiceAction = {\n  type: ACTION.RECEIVE_SOCKET_LEAVE_VOICE;\n  payload: ReceiveLeaveVoiceData;\n};\n\nexport type SendRtcSignalAction = {\n  type: ACTION.SEND_SOCKET_RTC_SIGNAL;\n  payload: SendRtcSignalData;\n};\n\nexport type ReceiveRtcSignalAction = {\n  type: ACTION.RECEIVE_SOCKET_RTC_SIGNAL;\n  payload: ReceiveRtcSignalData;\n};\n\nexport type ClearVoiceConnectionAction = {\n  type: ACTION.CLEAR_VOICE_CONNECTION;\n  payload: null;\n};\n\nexport type AddChannelAction = {\n  type: ACTION.ADD_CHANNEL;\n  payload: AddChannelData;\n};\n\nexport type AddServerAction = {\n  type: ACTION.ADD_SERVER;\n  payload: AddServerData;\n};\n\nexport type UpdateActiveUsersAction = {\n  type: ACTION.UPDATE_ACTIVE_USERS;\n  payload: { user_name: string }[];\n};\n\nexport type UpdateActiveStateAction = {\n  type: ACTION.UPDATE_ACTIVE_STATE;\n  payload: null;\n};\n\nexport type ChangeServerAction = {\n  type: ACTION.CHANGE_SERVER;\n  payload: string;\n};\n\nexport type ChangeChannelAction = {\n  type: ACTION.CHANGE_CHANNEL;\n  payload: string;\n};\n\nexport type ChangeViewAction = {\n  type: ACTION.CHANGE_VIEW;\n  payload: string;\n};\n\nexport type ChangePmUserAction = {\n  type: ACTION.CHANGE_PM_USER;\n  payload: string;\n};\n\nexport type LoadUserDataAction = {\n  type: ACTION.GET_INITIAL_DATA;\n  payload: LoadInitialData;\n};\n\nexport type SignInAction = {\n  type: ACTION.SIGN_IN;\n  payload: SignInData;\n};\n\nexport type SignOutAction = {\n  type: ACTION.SIGN_OUT;\n  payload: null;\n};\n\n/* Interfaces for Data coming into Action Creators */\n\nexport interface SendMessageData {\n  type: 'channelMessage';\n  server: string;\n  channel: string;\n  from: string;\n  msg: string;\n}\n\nexport interface SendPrivateMessageData {\n  type: 'privateMessage';\n  from: string;\n  to: string;\n  msg: string;\n}\n\nexport interface ReceiveMessageData {\n  server: string;\n  channel: string;\n  from: string;\n  msg: string;\n  date: Date;\n}\n\nexport interface ReceivePrivateMessageData {\n  user: string;\n  from: string;\n  to: string;\n  msg: string;\n  date: Date;\n}\n\nexport interface AddChannelData {\n  server: string;\n  channel: string;\n}\n\nexport interface AddServerData {\n  server: string;\n  channel: string;\n}\n\nexport interface LoadInitialData {\n  servers: {\n    [serverName: string]: {\n      channels: {\n        [channelName: string]: { from: string; to: string; msg: string; date: Date }[];\n      };\n    };\n  };\n  privateMessages: {\n    [userPM: string]: { from: string; to: string; msg: string; user: string; date: Date }[];\n  };\n}\n\nexport interface SendJoinVoiceData {\n  userId: string;\n  userName: string;\n  channelId: string;\n}\n\nexport interface ReceiveJoinVoiceData {\n  userId: string;\n  clients: { userId: string; userName: string }[];\n}\n\nexport interface SendLeaveVoiceData {\n  userId: string;\n  userName: string;\n  channelId: string;\n}\n\nexport interface ReceiveLeaveVoiceData {\n  userId: string;\n  clients: { userId: string; userName: string }[];\n}\n\nexport interface SendRtcSignalData {\n  userId: string;\n  ice?: any;\n  sdp?: any;\n}\n\nexport interface ReceiveRtcSignalData {\n  userId: string;\n  clients: string[];\n}\n\nexport interface SignInData {\n  userId: string;\n  userName: string;\n}\n","import axios from 'axios';\n\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : process.env.REACT_APP_API_URL;\n\nexport default axios.create({\n  baseURL: baseUrl\n});\n","import axios from '../components/Api/api';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\n\nimport {\n  ACTION,\n  UpdateActiveStateAction,\n  ChangeServerAction,\n  ChangeChannelAction,\n  ChangeViewAction,\n  ChangePmUserAction,\n  LoadUserDataAction,\n  LoadInitialData,\n  SignInAction,\n  SignInData,\n  SignOutAction,\n  SendJoinVoiceData,\n  SendJoinVoiceAction,\n  ReceiveJoinVoiceData,\n  ReceiveJoinVoiceAction,\n  SendRtcSignalData,\n  ReceiveRtcSignalData,\n  ReceiveRtcSignalAction,\n  SendRtcSignalAction,\n  SendLeaveVoiceAction,\n  ReceiveLeaveVoiceAction,\n  SendLeaveVoiceData,\n  ReceiveLeaveVoiceData,\n  ClearVoiceConnectionAction\n} from './types';\nimport {\n  SendMessageData,\n  ReceiveMessageData,\n  SendPrivateMessageData,\n  ReceivePrivateMessageData,\n  AddChannelData,\n  AddServerData\n} from './types';\nimport {\n  SendMessageAction,\n  ReceiveMessageAction,\n  SendPrivateMessageAction,\n  ReceivePrivateMessageAction,\n  AddChannelAction,\n  AddServerAction\n} from './types';\n\n// Action to send a message (Handled by socket middleware)\nexport const sendMessage = (message: SendMessageData): SendMessageAction => ({\n  type: ACTION.SEND_SOCKET_MESSAGE,\n  payload: message\n});\n\n// Action to add message to a channel (Handled by socket middleware)\nexport const receiveMessage = (message: ReceiveMessageData): ReceiveMessageAction => ({\n  type: ACTION.RECEIVE_SOCKET_MESSAGE,\n  payload: message\n});\n\n// Action to send new private message (Handled by socket middleware)\nexport const sendPrivateMessage = (message: SendPrivateMessageData): SendPrivateMessageAction => ({\n  type: ACTION.SEND_SOCKET_PRIVATE_MESSAGE,\n  payload: message\n});\n\n// Action to send new private message (Handled by socket middleware)\nexport const receivePrivateMessage = (message: ReceivePrivateMessageData): ReceivePrivateMessageAction => ({\n  type: ACTION.RECEIVE_SOCKET_PRIVATE_MESSAGE,\n  payload: message\n});\n\n// Action to send a join voice channel message (Handles by socket middleware)\nexport const sendJoinVoice = (data: SendJoinVoiceData): SendJoinVoiceAction => ({\n  type: ACTION.SEND_SOCKET_JOIN_VOICE,\n  payload: data\n});\n\n// Action to receive join voice channel message (Handles by socket middlware)\nexport const receiveJoinVoice = (data: ReceiveJoinVoiceData): ReceiveJoinVoiceAction => ({\n  type: ACTION.RECEIVE_SOCKET_JOIN_VOICE,\n  payload: data\n});\n\nexport const sendRtcSignal = (data: SendRtcSignalData): SendRtcSignalAction => ({\n  type: ACTION.SEND_SOCKET_RTC_SIGNAL,\n  payload: data\n});\n\nexport const sendLeaveVoice = (data: SendLeaveVoiceData): SendLeaveVoiceAction => ({\n  type: ACTION.SEND_SOCKET_LEAVE_VOICE,\n  payload: data\n});\n\nexport const receiveLeaveVoice = (data: ReceiveLeaveVoiceData): ReceiveLeaveVoiceAction => ({\n  type: ACTION.RECEIVE_SOCKET_LEAVE_VOICE,\n  payload: data\n});\n\nexport const clearVoiceConnection = (): ClearVoiceConnectionAction => ({\n  type: ACTION.CLEAR_VOICE_CONNECTION,\n  payload: null\n});\n\nexport const receiveRtcSignal = (data: ReceiveRtcSignalData): ReceiveRtcSignalAction => ({\n  type: ACTION.RECEIVE_SOCKET_RTC_SIGNAL,\n  payload: data\n});\n\n// Action to add Channel to a Server\nexport const addChannel = (channel: AddChannelData): AddChannelAction => ({\n  type: ACTION.ADD_CHANNEL,\n  payload: channel\n});\n\n// Action to add Server to server list\nexport const addServer = (server: AddServerData): AddServerAction => ({\n  type: ACTION.ADD_SERVER,\n  payload: server\n});\n\n// Get active user list in given server\nexport const updateActiveUserList = (serverId: string) => async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n  const response = await axios.get(`/server/activeusers?serverId=${serverId}`);\n  dispatch({ type: ACTION.UPDATE_ACTIVE_USERS, payload: response.data });\n};\n\n// Action creator to update active state (socket middleware)\nexport const updateActiveState = (): UpdateActiveStateAction => ({\n  type: ACTION.UPDATE_ACTIVE_STATE,\n  payload: null\n});\n\n// Action to change the current Active Server\nexport const changeServer = (server: string) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n  dispatch(updateActiveUserList(server.split('-')[1]));\n  dispatch<ChangeServerAction>({ type: ACTION.CHANGE_SERVER, payload: server });\n};\n\n// Action to change the current Active Channel\nexport const changeChannel = (channel: string): ChangeChannelAction => ({\n  type: ACTION.CHANGE_CHANNEL,\n  payload: channel\n});\n\n// Action to change the current active view\nexport const changeView = (view: string): ChangeViewAction => ({\n  type: ACTION.CHANGE_VIEW,\n  payload: view\n});\n\n// Action to change active user we have private message open with\nexport const changePMUser = (user: string): ChangePmUserAction => ({\n  type: ACTION.CHANGE_PM_USER,\n  payload: user\n});\n\n// Loads user Data. Gets all Servers + Channel History\nexport const loadUserData = (userId: string) => async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n  let url = `/user/data?userId=${userId}`;\n  const res = await axios.get<LoadInitialData>(url);\n  // get active user list for first server\n  dispatch(updateActiveUserList(Object.keys(res.data.servers)[0].split('-')[1]));\n  dispatch<LoadUserDataAction>({ type: ACTION.GET_INITIAL_DATA, payload: res.data });\n};\n\n// On sign in\nexport const signIn = (user: SignInData): SignInAction => ({\n  type: ACTION.SIGN_IN,\n  payload: user\n});\n\n// On sign out\nexport const signOut = (): SignOutAction => ({\n  type: ACTION.SIGN_OUT,\n  payload: null\n});\n","import { createHashHistory } from 'history';\n\nexport default createHashHistory();\n","import React from 'react'\nimport { Snackbar } from '@material-ui/core';\n\n// Snackbar that allows you to set the content, visibility \n// and change visibility from parent component\nexport default function SnackBarContent(props) {\n\n  const { content, visible, setVisible } = props;\n\n  // When opened, closes itself after 2.5sec\n  const handleSnackBarOpen = () => {\n    setTimeout(() => {\n      setVisible(false);\n    }, 2500)\n  }\n\n  return (\n    <Snackbar\n      open={visible}\n      message={content}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left'\n      }}\n      onEntered={() => handleSnackBarOpen()}\n    />\n  )\n}\n","import React from 'react';\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Slide, Button, Typography } from '@material-ui/core';\nimport { Person } from '@material-ui/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { signOut, changePMUser } from '../../actions';\nimport { StoreState } from '../../reducers';\n\nexport default function PrivateMessageUserList() {\n  // Get from Redux store\n  const { privateMessages } = useSelector((state: StoreState) => state.chat);\n  const user = useSelector((state: StoreState) => state.user);\n  const userList = Object.keys(privateMessages);\n  const dispatch = useDispatch();\n\n  // Signs the user out\n  const handleSignOut = () => {\n    localStorage.clear();\n    dispatch(signOut());\n  };\n\n  return (\n    <div className=\"channels-container\">\n      <List className=\"channel-list\">\n        <ListItem className=\"title-container\">Home</ListItem>\n        {userList.map((userItem, i) => (\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={i}>\n            <ListItem button className=\"user-item\" onClick={() => dispatch(changePMUser(userItem))}>\n              <Avatar>\n                {' '}\n                <img className=\"user\" src={process.env.PUBLIC_URL + '/user.png'} alt=\"user icon\" height=\"48\" />{' '}\n              </Avatar>\n              <Typography variant=\"body1\" className=\"user-list-name\">\n                {userItem}\n              </Typography>\n            </ListItem>\n          </Slide>\n        ))}\n      </List>\n\n      <div className=\"user-options\">\n        <ListItem className=\"user-info\">\n          <ListItemAvatar>\n            <Avatar>\n              <Person />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={user.userName} />\n          <Button onClick={handleSignOut}>Sign out</Button>\n        </ListItem>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  Tooltip,\n  IconButton,\n  Typography,\n  ListItemText,\n  Menu,\n  MenuItem,\n  Slide,\n  Button\n} from '@material-ui/core';\nimport {\n  changeChannel,\n  signOut,\n  sendJoinVoice,\n  sendRtcSignal,\n  sendLeaveVoice,\n  clearVoiceConnection\n} from '../../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from '../Api/api';\nimport { StoreState } from '../../reducers';\nimport { connect } from 'http2';\n\ninterface ChannelListProps {\n  setDrawerVisible?: (drawerVisible: boolean) => void;\n  setModalVisible: (modalVisible: boolean) => void;\n  setModalType: (modalType: string) => void;\n  handleSnackMessage: (response: string, pass: boolean) => void;\n}\n\n// Audio stream vars\nlet localStream: any;\nlet prevActiveChannel: string;\nlet connections: any;\nlet peerConnectionConfig = {\n  iceServers: [{ urls: 'stun:stun.services.mozilla.com' }, { urls: 'stun:stun.l.google.com:19302' }]\n};\n\nexport default function ChannelList(props: ChannelListProps) {\n  // Get State from Redux Store\n  const chatStore = useSelector((state: StoreState) => state.chat);\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]['channels']);\n  const { activeServer, activeChannel, voiceClients, voiceJoinUserId, rtcSignalData, voiceLeaveUserId } = chatStore;\n  const dispatch = useDispatch();\n  const user = useSelector((state: StoreState) => state.user);\n\n  // Get props from parent\n  const { setDrawerVisible, setModalVisible, setModalType, handleSnackMessage } = props;\n\n  // Local state\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\n  const [channelAnchorEl, setChannelAnchorEl] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // When user or active server changes, check if we are admin\n  useEffect(() => {\n    // Gets the status if we are admin of current server (allows us to change server settings)\n    async function getAdmin() {\n      let serverId = activeServer.split('-')[1];\n      const response = await axios.get(`/server/admin?serverId=${serverId}&userId=${user.userId}`);\n      setIsAdmin(response.data);\n    }\n\n    getAdmin();\n  }, [activeServer, user]);\n\n  // Handle channel change, and closes drawer if on mobile view\n  const handleChannelChange = (channel: string) => {\n    dispatch(changeChannel(channel));\n    if (typeof setDrawerVisible !== 'undefined') setDrawerVisible(false);\n  };\n\n  // Checks if only 1 channel, if so does not call callback to delete channel\n  const handleChannelDelete = (callBack: Function) => {\n    if (channels.length === 1) {\n      handleSnackMessage('Please delete the server if only 1 channel', false);\n    } else {\n      callBack();\n    }\n  };\n\n  // Handles to show modal, and its type\n  const handleModalShow = (modalType: string) => {\n    setModalType(modalType);\n    setModalVisible(true);\n  };\n\n  // Handles showing of Settings Menu\n  const handleSettingsClick = (e: any, type: string) => {\n    if (type === 'server') setServerAnchorEl(e.currentTarget);\n    else if (type === 'channel') setChannelAnchorEl(e.currentTarget);\n  };\n\n  // Handles closing settings menu\n  const handleClose = () => {\n    setServerAnchorEl(null);\n    setChannelAnchorEl(null);\n  };\n\n  // Signs the user out\n  const handleSignOut = () => {\n    localStorage.clear();\n    dispatch(signOut());\n  };\n\n  // Handles saving serverId to clipboard\n  const handleSaveClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    handleSnackMessage(`Server ID ${text} saved to clipboard`, false);\n  };\n\n  // // Listens for changes on user signed in, asks browser for microphone access\n  useEffect(() => {\n    if (navigator.mediaDevices.getUserMedia && user.isSignedIn) {\n      navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n        localStream = stream;\n      });\n    }\n  }, [user.isSignedIn]);\n\n  // Listens for changes on active channel, and joins voice if channel is a voice channel\n  useEffect(() => {\n    if (activeChannel.split('-')[0] === 'voice') {\n      let data = { userId: user.userId, userName: user.userName, channelId: activeChannel.split('-')[1] };\n      attachVoiceChannel();\n      dispatch(sendJoinVoice(data));\n      prevActiveChannel = activeChannel;\n    } else {\n      let data;\n      if (prevActiveChannel)\n        data = { userId: user.userId, userName: user.userName, channelId: prevActiveChannel.split('-')[1] };\n      else data = { userId: user.userId, userName: user.userName, channelId: activeChannel.split('-')[1] };\n      dispatch(sendLeaveVoice(data));\n      dispatch(clearVoiceConnection());\n      disconnectPreviousVoice();\n    }\n    prevActiveChannel = activeChannel;\n  }, [activeChannel]);\n\n  // Listens for changes on new voice clients\n  useEffect(() => {\n    if (voiceJoinUserId && voiceClients && localStream) {\n      onUserJoin(voiceJoinUserId, voiceClients);\n    }\n  }, [voiceJoinUserId, voiceClients]);\n\n  // Listens for changes on our signaling data\n  useEffect(() => {\n    if (voiceJoinUserId !== '') {\n      const userId = rtcSignalData.userId;\n      const message = rtcSignalData;\n      gotMessageFromServer(userId, message);\n    }\n  }, [rtcSignalData, voiceJoinUserId]);\n\n  // Listens for changes on users leaving voice channel\n  useEffect(() => {\n    if (voiceLeaveUserId !== '') {\n      onUserLeave(voiceLeaveUserId);\n    }\n  }, [voiceLeaveUserId]);\n\n  // When user accepts, add their stream to page\n  const attachVoiceChannel = () => {\n    let audios = document.createElement('div');\n    audios.id = 'audiosContainer';\n\n    let div = document.createElement('div');\n    let imageSrc = process.env.PUBLIC_URL + '/user.png';\n    div.innerHTML = `\n    <div class=\"user-voice-item\">\n      <div class=\"user-voice-avatar\">\n        <img src=${imageSrc} alt=\"user icon\" height=\"38\" />\n      </div>\n      <div class=\"user-voice-name\">\n        ${user.userName}\n      </div>\n    </div>\n    `;\n\n    let audio = document.createElement('audio');\n    // Set data properties of new audio element\n    audio.srcObject = localStream;\n    audio.autoplay = true;\n    audio.controls = false;\n    audio.muted = true;\n\n    // Put element into the page\n    div.appendChild(audio);\n    audios.appendChild(div);\n    let audiosParent = document.getElementById(activeChannel.split('-')[0]);\n    if (audiosParent) {\n      if (audiosParent.parentNode) {\n        audiosParent.parentNode.insertBefore(audios, audiosParent.nextSibling);\n      }\n    }\n  };\n\n  // On user join add to connections array and bind event handlers + create offers\n  const onUserJoin = (newUserId: string, clients: { userName: string; userId: string }[]) => {\n    // Iterate over client list\n    clients.forEach(user => {\n      // If new client isnt in our list\n      if (!connections[user.userId]) {\n        // Add this new users Peer connection to our connections array ( use stun servers )\n        connections[user.userId] = new RTCPeerConnection(peerConnectionConfig);\n\n        // Wait for peer to generate ice candidate\n        connections[user.userId].onicecandidate = (event: any) => {\n          if (event.candidate !== null) {\n            dispatch(sendRtcSignal({ userId: user.userId, ice: event.candidate }));\n          }\n        };\n\n        // Event handler for peer adding their stream\n        connections[user.userId].onaddstream = (event: any) => {\n          gotRemoteStream(event, user.userId, user.userName);\n        };\n\n        // Adds our local video stream to Peer\n        connections[user.userId].addStream(localStream);\n      }\n    });\n\n    // Create offer to new client joining if it is not ourselves\n    // Dont create offer to ourselves on first join\n    if (newUserId !== user.userId) {\n      connections[newUserId].createOffer().then((description: RTCSessionDescription) => {\n        connections[newUserId]\n          .setLocalDescription(description)\n          .then(() => {\n            dispatch(sendRtcSignal({ userId: newUserId, sdp: connections[newUserId].localDescription }));\n          })\n          .catch((e: any) => console.log(e));\n      });\n    }\n  };\n\n  // On user leave close peer connection and remove their audio element\n  const onUserLeave = (userId: string) => {\n    // Close RTC peer connection\n    connections[userId].close();\n    connections[userId] = null;\n    // Remove the audio element from page\n    let audio = document.querySelector('[data-socket=\"' + userId + '\"]') as HTMLElement;\n    let parentDiv = audio.parentElement as HTMLElement;\n    let parentContainer = parentDiv.parentElement as HTMLElement;\n    parentContainer.removeChild(parentDiv);\n  };\n\n  // New message from server, configure RTC sdp session objects\n  const gotMessageFromServer = (fromId: string, signal: any) => {\n    //Make sure it's not coming from yourself\n    if (fromId !== user.userId) {\n      if (signal.sdp) {\n        connections[fromId]\n          .setRemoteDescription(new RTCSessionDescription(signal.sdp))\n          .then(() => {\n            if (signal.sdp.type === 'offer') {\n              connections[fromId]\n                .createAnswer()\n                .then((description: any) => {\n                  connections[fromId]\n                    .setLocalDescription(description)\n                    .then(() => {\n                      dispatch(sendRtcSignal({ userId: fromId, sdp: connections[fromId].localDescription }));\n                    })\n                    .catch((e: any) => console.log(e));\n                })\n                .catch((e: any) => console.log(e));\n            }\n          })\n          .catch((e: any) => console.log(e));\n      }\n\n      if (signal.ice) {\n        connections[fromId].addIceCandidate(new RTCIceCandidate(signal.ice)).catch((e: any) => console.log(e));\n      }\n    }\n  };\n\n  // If we get a new remote stream, add it to page\n  const gotRemoteStream = (event: any, userSocketId: string, userSocketName: string) => {\n    // Create our wrapper div\n    let div = document.createElement('div');\n    let imageSrc = process.env.PUBLIC_URL + '/user.png';\n    div.innerHTML = `\n    <div class=\"user-voice-item\">\n      <div class=\"user-voice-avatar\">\n        <img src=${imageSrc} alt=\"user icon\" height=\"38\" />\n      </div>\n      <div class=\"user-voice-name\">\n        ${user.userName}\n      </div>\n    </div>\n    `;\n\n    // Set data properties of new audio element\n    let audio = document.createElement('audio');\n    audio.setAttribute('data-socket', userSocketId);\n    audio.srcObject = event.stream;\n    audio.autoplay = true;\n\n    // Get our audios container\n    let audios = document.getElementById('audiosContainer') as HTMLElement;\n\n    // Put element into the page\n    div.appendChild(audio);\n    audios.appendChild(div);\n  };\n\n  // Disconnects our voice session on change channel\n  const disconnectPreviousVoice = () => {\n    let audios = document.getElementById('audiosContainer');\n    if (audios) {\n      audios.outerHTML = '';\n    }\n    // Close all rtc peer connections and empty array\n    if (connections) {\n      connections.forEach((connection: string) => {\n        connections[connection].close();\n      });\n    }\n    connections = [];\n  };\n\n  return (\n    <div className=\"channels-container\">\n      <List className=\"channel-list\">\n        <ListItem className=\"title-container\">\n          {activeServer.split('-')[0]}\n          {isAdmin ? (\n            <React.Fragment>\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\n                <IconButton onClick={e => handleSettingsClick(e, 'server')}>\n                  {' '}\n                  <MoreVert />{' '}\n                </IconButton>\n              </Tooltip>\n            </React.Fragment>\n          ) : null}\n        </ListItem>\n        {channels.map((channel, i) => (\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\n            <ListItem\n              onClick={e => handleChannelChange(channel)}\n              button\n              className=\"channel-item\"\n              id={`${channel.split('-')[0]}`}\n            >\n              <Typography variant=\"body1\">\n                <i className=\"channel-hashtag\">#</i>\n                {channel.split('-')[0].toLowerCase()}\n              </Typography>\n              {isAdmin ? (\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\n                  <IconButton onClick={e => handleSettingsClick(e, 'channel')}>\n                    {' '}\n                    <Settings className=\"channel-settings\" />{' '}\n                  </IconButton>\n                </Tooltip>\n              ) : null}\n            </ListItem>\n          </Slide>\n        ))}\n      </List>\n\n      <div className=\"user-options\">\n        <ListItem className=\"user-info\">\n          <ListItemAvatar>\n            <Avatar>\n              <Person />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={user.userName} />\n          <Button onClick={handleSignOut}>Sign out</Button>\n        </ListItem>\n      </div>\n\n      <Menu\n        id=\"server-settings-menu\"\n        anchorEl={serverAnchorEl}\n        open={Boolean(serverAnchorEl)}\n        onClick={handleClose}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={() => handleSaveClipboard(activeServer.split('-')[1])}>\n          {' '}\n          Server Id - {activeServer.split('-')[1]}{' '}\n        </MenuItem>\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\n        <MenuItem onClick={() => handleModalShow('server-delete')}> Delete Server </MenuItem>\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\n      </Menu>\n\n      <Menu\n        id=\"channel-settings-menu\"\n        anchorEl={channelAnchorEl}\n        open={Boolean(channelAnchorEl)}\n        onClick={handleClose}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\n        <MenuItem onClick={() => handleChannelDelete(() => handleModalShow('channel-delete'))}>\n          {' '}\n          Delete Channel{' '}\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { GroupWork, AddCircleOutline, Home } from '@material-ui/icons';\nimport { List, Tooltip, IconButton } from '@material-ui/core';\nimport { changeServer, changeView } from '../../actions';\nimport { StoreState } from '../../reducers';\n\ninterface ServerListProps {\n  setModalVisible: (modalVisible: boolean) => void;\n  setModalType: (modalType: string) => void;\n}\n\nexport default function ServerList(props: ServerListProps) {\n  // Get State from Redux Store\n  const chatStore = useSelector((state: StoreState) => state.chat);\n  const servers = Object.keys(chatStore.servers);\n  const dispatch = useDispatch();\n\n  // Get props from parent\n  const { setModalVisible, setModalType } = props;\n\n  // Handles server change, and closes drawer if on mobile view\n  const handleServerChange = (server: string) => {\n    dispatch(changeServer(server));\n  };\n\n  // Handles to show modal, and its type\n  const handleModalShow = () => {\n    setModalType('server-create-join');\n    setModalVisible(true);\n  };\n\n  // Handles changing the view and calls callback function\n  const handleChangeView = (view: string, callBack?: Function) => {\n    dispatch(changeView(view));\n    if (callBack !== undefined) callBack();\n  };\n\n  return (\n    <div className=\"servers-container\">\n      <List>\n        <Tooltip title=\"Home\" key=\"home\" placement=\"right\" className=\"tooltip\">\n          <IconButton className=\"home-icon\" onClick={() => handleChangeView('home')}>\n            <Home />\n          </IconButton>\n        </Tooltip>\n        <div className=\"menu-seperator\" />\n\n        {servers.map(server => (\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\n            <IconButton\n              className=\"server-icon\"\n              onClick={() => handleChangeView('servers', () => handleServerChange(server))}\n            >\n              <GroupWork />\n            </IconButton>\n          </Tooltip>\n        ))}\n\n        <Tooltip title=\"Create Server\" key=\"create-server\" placement=\"right\" className=\"tooltip\">\n          <IconButton className=\"server-icon\" onClick={() => handleChangeView('servers', () => handleModalShow())}>\n            <AddCircleOutline />\n          </IconButton>\n        </Tooltip>\n      </List>\n    </div>\n  );\n}\n","import React, { useState, KeyboardEvent } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Paper,\n  Button,\n  Card,\n  CardContent,\n  Typography,\n  CardActionArea,\n  CardMedia,\n  Slide,\n  TextField,\n  Grid\n} from '@material-ui/core';\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\nimport axios from '../Api/api';\n\nimport { addChannel, addServer } from '../../actions';\nimport { StoreState } from '../../reducers';\n\ninterface ActionsModalProps {\n  handleSnackMessage: (response: string, pass: boolean) => void;\n  modalType: string;\n}\n\nexport default function ActionsModal(props: ActionsModalProps) {\n  // Get State from Redux Store\n  const { userId } = useSelector((state: StoreState) => state.user);\n  const { activeServer, activeChannel } = useSelector((state: StoreState) => state.chat);\n\n  const dispatch = useDispatch();\n\n  // Get data from props\n  const { handleSnackMessage, modalType } = props;\n\n  // Local state to control Modal Windows + Data fields\n  const [mainVisible, setMainVisible] = useState(true);\n  const [mainDirection, setMainDirection]: any = useState('left');\n  const [createVisible, setCreateVisible] = useState(false);\n  const [createDirection, setCreateDirection]: any = useState('left');\n  const [joinVisible, setJoinVisible] = useState(false);\n  const [joinDirection, setJoinDirection]: any = useState('left');\n  const [serverName, setServerName] = useState('');\n  const [serverId, setServerId] = useState('');\n  const [channelName, setChannelName] = useState('');\n\n  // Handles showing the Join Server window\n  const showhandleJoinServer = () => {\n    setMainDirection('right');\n    setCreateDirection('left');\n    setJoinVisible(true);\n    setMainVisible(false);\n  };\n\n  // Handles showing the Create Server window\n  const showhandleCreateServer = () => {\n    setMainDirection('right');\n    setJoinDirection('left');\n    setCreateVisible(true);\n    setMainVisible(false);\n  };\n\n  // Method to handle creation of servers\n  const handleCreateServer = async (serverName: string, userId: string) => {\n    try {\n      const response = await axios.post(`/server/create?serverName=${serverName}&userId=${userId}`);\n      dispatch(addServer(response.data));\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${\n        response.data.server.split('-')[1]\n      } created`;\n      handleSnackMessage(message, false);\n    } catch (err) {\n      handleSnackMessage(err.response.data, false);\n    }\n  };\n\n  // Method to handle joining of servers\n  const handleJoinServer = async (serverId: string, userId: string) => {\n    try {\n      const response = await axios.post(`/server/join?serverId=${serverId}&userId=${userId}`);\n      handleSnackMessage(response.data, true);\n    } catch (err) {\n      handleSnackMessage(err.response.data, false);\n    }\n  };\n\n  // Method to handle renaming of servers\n  const handleRenameServer = async (serverName: string, serverId: string) => {\n    try {\n      const response = await axios.post(\n        `/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`\n      );\n      handleSnackMessage(response.data, true);\n    } catch (err) {\n      handleSnackMessage(err.response.data, false);\n    }\n  };\n\n  // Method to handle deleting servers\n  const handleDeleteServer = async (serverId: string, userId: string) => {\n    try {\n      const response = await axios.delete(`/server/delete?serverId=${serverId}&userId=${userId}`);\n      handleSnackMessage(response.data, true);\n    } catch (err) {\n      handleSnackMessage(err.response.data, false);\n    }\n  };\n\n  // Method to handle creation of channels\n  const handleCreateChannel = async (channelName: string, server: string) => {\n    try {\n      const response = await axios.post(`/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\n      dispatch(addChannel(response.data));\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split(\n        '-'[1]\n      )} created`;\n      handleSnackMessage(message, false);\n    } catch (err) {\n      handleSnackMessage(err.response.data, false);\n    }\n  };\n\n  // Method to handle renaming of channels\n  const handleRenameChannel = async (channelName: string, channelId: string) => {\n    try {\n      const response = await axios.post(\n        `/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${\n          activeServer.split('-')[1]\n        }&userId=${userId}`\n      );\n      handleSnackMessage(response.data, true);\n    } catch (err) {\n      handleSnackMessage(err.response.data, false);\n    }\n  };\n\n  // Method to handle deleting of channels\n  const handleDeleteChannel = async (channelName: string, channelId: string) => {\n    try {\n      const response = await axios.delete(\n        `/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`\n      );\n      handleSnackMessage(response.data, true);\n    } catch (err) {\n      handleSnackMessage(err.response.data, false);\n    }\n  };\n\n  // Handles keypress and calls the callback method\n  const handleKeyPress = (e: KeyboardEvent, callbackMethod: Function) => {\n    if (e.key === 'Enter') {\n      callbackMethod();\n    }\n  };\n\n  // Renders the Main Modal Window with options to Create / Join server\n  const renderMainServer = () => {\n    return (\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Another server? Wow you're popular!\n            </Typography>\n          </Grid>\n          <Grid item sm={6} xs={12}>\n            <Card className=\"grid-card\">\n              <CardActionArea onClick={() => showhandleCreateServer()}>\n                <CardContent>\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>\n                    Create\n                  </Typography>\n                  <Typography variant=\"body1\" paragraph>\n                    Create a server and invite all your buddies.\n                  </Typography>\n                  <CardMedia>\n                    <AddToQueue className=\"modal-card-icon\" />\n                  </CardMedia>\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">\n                    Create a server\n                  </Button>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n          <Grid item sm={6} xs={12}>\n            <Card className=\"grid-card\">\n              <CardActionArea onClick={() => showhandleJoinServer()}>\n                <CardContent>\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>\n                    Join\n                  </Typography>\n                  <Typography variant=\"body1\" paragraph>\n                    Join a friends server and pwn some noobs!\n                  </Typography>\n                  <CardMedia>\n                    <GroupAdd className=\"modal-card-icon\" />\n                  </CardMedia>\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">\n                    Join a server\n                  </Button>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders the Server Create Modal Window\n  const renderServerCreate = () => {\n    return (\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Create a Server!\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <Typography variant=\"body1\" paragraph>\n              {' '}\n              Enter a Server Name to create a server and get access to unlimited chat channels!{' '}\n            </Typography>\n            <TextField\n              id=\"create-server-field\"\n              label=\"Server Name\"\n              value={serverName}\n              onChange={e => setServerName(e.target.value)}\n              onKeyPress={e => handleKeyPress(e, () => handleCreateServer(serverName, userId))}\n              margin=\"dense\"\n              variant=\"outlined\"\n              autoComplete=\"off\"\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => handleCreateServer(serverName, userId)}\n            >\n              Create Server\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders a modal with an input\n  const renderServerRename = () => {\n    return (\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Rename Server\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <Typography variant=\"body1\" paragraph>\n              {' '}\n              Enter a new Server Name for Server - {activeServer.split('-')[0]}{' '}\n            </Typography>\n            <TextField\n              id=\"create-channel-field\"\n              label=\"Channel Name\"\n              value={serverName}\n              onChange={e => setServerName(e.target.value)}\n              onKeyPress={e => handleKeyPress(e, () => handleRenameServer(serverName, activeServer.split('-')[1]))}\n              margin=\"dense\"\n              variant=\"outlined\"\n              autoComplete=\"off\"\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => handleRenameServer(serverName, activeServer.split('-')[1])}\n            >\n              Rename Server\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders a modal to delete a server\n  const renderServerDelete = () => {\n    return (\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Delete Server\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <Typography variant=\"body1\" paragraph>\n              {' '}\n              Are you sure you want to delete - {activeServer.split('-')[0]}{' '}\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ backgroundColor: 'green', marginRight: '8px' }}\n              onClick={() => handleDeleteServer(activeServer.split('-')[1], userId)}\n            >\n              Yes\n            </Button>\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ backgroundColor: 'red', marginLeft: '8px' }}\n              onClick={() => handleSnackMessage('Not deleting channel', false)}\n            >\n              No\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders the Server Join Modal Window\n  const renderServerJoin = () => {\n    return (\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Join a Server!\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <Typography variant=\"body1\" paragraph>\n              {' '}\n              Enter a the Server Id provided by your friend and start chatting right now!{' '}\n            </Typography>\n            <TextField\n              id=\"join-server-field\"\n              label=\"Server Id\"\n              value={serverId}\n              onChange={e => setServerId(e.target.value)}\n              onKeyPress={e => handleKeyPress(e, () => handleJoinServer(serverId, userId))}\n              margin=\"dense\"\n              variant=\"outlined\"\n              autoComplete=\"off\"\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => handleJoinServer(serverId, userId)}\n            >\n              Join Server\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders the Channel Create Modal Window\n  const renderChannelCreate = () => {\n    return (\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Create a Channel!\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <Typography variant=\"body1\" paragraph>\n              {' '}\n              Enter a Channel Name for your new channel and start chatting right now!{' '}\n            </Typography>\n            <TextField\n              id=\"create-channel-field\"\n              label=\"Channel Name\"\n              value={channelName}\n              onChange={e => setChannelName(e.target.value)}\n              onKeyPress={e => handleKeyPress(e, () => handleCreateChannel(channelName, activeServer))}\n              margin=\"dense\"\n              variant=\"outlined\"\n              autoComplete=\"off\"\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => handleCreateChannel(channelName, activeServer)}\n            >\n              Create Channel\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders a modal to rename a channel\n  const renderChannelRename = () => {\n    return (\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Rename Chanel\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <Typography variant=\"body1\" paragraph>\n              {' '}\n              Enter a new Channel Name for Channel - {activeChannel.split('-')[0]}{' '}\n            </Typography>\n            <TextField\n              id=\"create-channel-field\"\n              label=\"Channel Name\"\n              value={channelName}\n              onChange={e => setChannelName(e.target.value)}\n              onKeyPress={e => handleKeyPress(e, () => handleRenameChannel(channelName, activeChannel.split('-')[1]))}\n              margin=\"dense\"\n              variant=\"outlined\"\n              autoComplete=\"off\"\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => handleRenameChannel(channelName, activeChannel.split('-')[1])}\n            >\n              Rename Channel\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders a modal to delete a channel\n  const renderChannelDelete = () => {\n    return (\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Delete Channel\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <Typography variant=\"body1\" paragraph>\n              {' '}\n              Are you sure you want to delete - {activeChannel.split('-')[0]}{' '}\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ backgroundColor: 'green', marginRight: '8px' }}\n              onClick={() => handleDeleteChannel(channelName, activeChannel.split('-')[1])}\n            >\n              Yes\n            </Button>\n            <Button\n              className=\"modal-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ backgroundColor: 'red', marginLeft: '8px' }}\n              onClick={() => handleSnackMessage('Not deleting channel', false)}\n            >\n              No\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  if (modalType === 'server-create-join')\n    return (\n      <Paper className=\"container-prompt\">\n        {renderMainServer()}\n        {renderServerCreate()}\n        {renderServerJoin()}\n      </Paper>\n    );\n  else if (modalType === 'channel-create') {\n    return <Paper className=\"container-prompt\">{renderChannelCreate()}</Paper>;\n  } else if (modalType === 'server-rename') {\n    return <Paper className=\"container-prompt\">{renderServerRename()}</Paper>;\n  } else if (modalType === 'channel-rename') {\n    return <Paper className=\"container-prompt\">{renderChannelRename()}</Paper>;\n  } else if (modalType === 'channel-delete') {\n    return <Paper className=\"container-prompt\">{renderChannelDelete()}</Paper>;\n  } else if (modalType === 'server-delete') {\n    return <Paper className=\"container-prompt\">{renderServerDelete()}</Paper>;\n  } else return null;\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Modal } from '@material-ui/core';\n\nimport SnackBarContent from '../SnackBar/SnackBarContent';\nimport PrivateMessageUserList from './PrivateMessageUserList';\nimport ChannelList from './ChannelList';\nimport ServerList from './ServerList';\nimport ActionsModal from '../ActionsModal/ActionsModal';\nimport { loadUserData } from '../../actions';\nimport { StoreState } from '../../reducers';\n\ninterface SidebarProps {\n  setDrawerVisible?: (drawerVisible: boolean) => void;\n}\n\nexport default function Sidebar(props: SidebarProps) {\n  // Get from Redux Store\n  const user = useSelector((state: StoreState) => state.user);\n  const { activeView } = useSelector((state: StoreState) => state.chat);\n\n  // Dispatch\n  const dispatch = useDispatch();\n\n  // Get props from parent (Used when Sidebar is rendered by header on mobile)\n  const { setDrawerVisible } = props;\n\n  // Local state\n  const [modalVisible, setModalVisible] = useState(false);\n  const [modalType, setModalType] = useState('');\n  const [snackContent, setSnackContent] = useState('');\n  const [snackVisible, setSnackVisible] = useState(false);\n\n  // Handles Success of Modal Server Create / Join\n  // Closes Modal and show Snackbar with Create / Join Messsage\n  const handleSnackMessage = (response: string, pass: boolean) => {\n    if (response !== null) {\n      setModalVisible(false);\n      setSnackVisible(true);\n      setSnackContent(response);\n      if (pass) dispatch(loadUserData(user.userId));\n    }\n  };\n\n  return (\n    <div className=\"sidebar-container\">\n      <ServerList setModalVisible={setModalVisible} setModalType={setModalType} />\n      {activeView === 'servers' ? (\n        <ChannelList\n          setDrawerVisible={setDrawerVisible}\n          setModalVisible={setModalVisible}\n          setModalType={setModalType}\n          handleSnackMessage={handleSnackMessage}\n        />\n      ) : (\n        <PrivateMessageUserList />\n      )}\n      <Modal\n        open={modalVisible}\n        aria-labelledby=\"server create modal\"\n        aria-describedby=\"create a server\"\n        className=\"modal-wrapper\"\n        onClose={() => setModalVisible(false)}\n      >\n        <ActionsModal handleSnackMessage={handleSnackMessage} modalType={modalType} />\n      </Modal>\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\n    </div>\n  );\n}\n","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\nimport { StoreState } from '../../reducers';\nimport { sendMessage, sendPrivateMessage } from '../../actions';\nimport { SendMessageData, SendPrivateMessageData } from '../../actions/types';\n\nexport default function SendMessage() {\n  // Get State from Redux Store\n  const { activeServer, activeChannel, activeView, activePMUser } = useSelector((state: StoreState) => state.chat);\n  const { userName } = useSelector((state: StoreState) => state.user);\n  const dispatch = useDispatch();\n\n  // Local state\n  const [chatMessage, setChatMessage] = useState('');\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\n  const [placeholderTitle, setPlaceholderTitle] = useState('');\n\n  // Check active view to determine where we send our messages\n  useEffect(() => {\n    if (activeView === 'servers') {\n      setPlaceholderTitle(activeChannel.split('-')[0]);\n    } else if (activeView === 'home') {\n      setPlaceholderTitle(activePMUser);\n    }\n  }, [activeView, activeChannel, activePMUser]);\n\n  // Checks is message is valid (not just spaces)\n  function isValidMessage(msg: string) {\n    let validMessage = true;\n    // Check if empty stirng\n    if (msg.trim() === '') validMessage = false;\n    return validMessage;\n  }\n\n  // Will format out multiple line breaks to 2 max\n  function formatMessage(msg: string) {\n    return msg.replace(/(\\r\\n|\\r|\\n){3,}/g, '$1\\n\\n');\n  }\n\n  // Handles submission of messages\n  // Dispatches event and sets TextField value to empty\n  function handleSubmit(message: SendMessageData | SendPrivateMessageData) {\n    if (isValidMessage(message.msg)) {\n      message.msg = formatMessage(message.msg);\n      // Send message to server, or user\n      if (activeView === 'servers' && message.type === 'channelMessage') {\n        dispatch(sendMessage(message));\n      } else if (activeView === 'home' && message.type === 'privateMessage') {\n        dispatch(sendPrivateMessage(message));\n      }\n      setChatMessage('');\n    } else {\n      // throw some error\n    }\n  }\n\n  // Handles enter event to submit message\n  function handleKeyPress(e: any) {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      if (activeView === 'servers')\n        handleSubmit({\n          server: activeServer,\n          channel: activeChannel,\n          from: userName,\n          msg: chatMessage,\n          type: 'channelMessage'\n        });\n      else if (activeView === 'home')\n        handleSubmit({ from: userName, to: activePMUser, msg: chatMessage, type: 'privateMessage' });\n    }\n  }\n\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\n  function handleOnChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    if (e.target.value !== '\\n') setChatMessage(e.target.value);\n  }\n\n  // When click emoji, close the menu\n  function handleEmojiClick(e: any) {\n    setChatMessage(chatMessage + e.native);\n    setEmojiMenuVisible(false);\n  }\n\n  // Closes emoji menu when clicked outside the div\n  window.onclick = (e: any) => {\n    if (String(e.target.className).includes('send-message-emoji-menu')) setEmojiMenuVisible(false);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"send-message-border\" />\n      <div className=\"send-message-container\">\n        <TextareaAutosize\n          aria-label=\"empty textarea\"\n          placeholder={`Message  #${placeholderTitle}`}\n          className=\"message-text-area\"\n          value={chatMessage}\n          onChange={e => handleOnChange(e)}\n          onKeyPress={e => handleKeyPress(e)}\n        />\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\n      </div>\n      <div className={emojiMenuVisible ? 'send-message-emoji-menu show' : 'send-message-emoji-menu hide'}>\n        <div className=\"emoji-wrapper\">\n          <Picker set=\"emojione\" onSelect={e => handleEmojiClick(e)} />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, Typography, makeStyles, TextField } from '@material-ui/core';\nimport { sendPrivateMessage, changeView, changePMUser } from '../../actions';\n\nconst useStyle = makeStyles(theme => ({\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center',\n    width: 250,\n    background: '#2f3136'\n  },\n  cardHeader: {\n    background: '#202225',\n    width: '100%'\n  },\n  image: {\n    marginTop: '1em',\n    marginBottom: '8px'\n  },\n  cardInput: {\n    padding: '1em'\n  },\n  input: {\n    height: '38px'\n  }\n}));\n\nexport default function UserInfo(props) {\n\n  // Get state from redux store\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  const { userName, setUserInfoVisible } = props;\n  const classes = useStyle();\n  const [messageText, setMessageText] = useState('');\n\n  // Handles keypress and calls the callback method\n  const handleKeyPress = (e, callbackMethod) => {\n    if (e.key === \"Enter\") {\n      callbackMethod();\n    }\n  }\n\n  // Calls API to send a Private message\n  const handleSendPrivateMessage = (messageText, userName) => {\n    const msg = { \"from\": user.userName, \"msg\": messageText, \"to\": userName };\n    dispatch(sendPrivateMessage(msg));\n    dispatch(changeView('home'));\n    dispatch(changePMUser(msg.to.toLowerCase()));\n    setUserInfoVisible(false);\n  }\n\n  return (\n    <Card className={classes.card}>\n      <div className={classes.cardHeader}>\n        <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user-icon\" className={classes.image} />\n        <Typography variant='body1' gutterBottom>{userName}</Typography>\n        <Typography variant='body2' gutterBottom>This is a description</Typography>\n      </div>\n      <div className={classes.cardInput}>\n        <TextField\n          id=\"user-private-message\"\n          label={`Private message`}\n          placeholder={`Message @ ${userName}`}\n          value={messageText}\n          onChange={(e) => setMessageText(e.target.value)}\n          onKeyPress={(e) => handleKeyPress(e, () => handleSendPrivateMessage(messageText, userName))}\n          variant=\"outlined\"\n          InputProps={{\n            className: classes.input\n          }}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n      </div>\n    </Card>\n  )\n}\n","import React, { useState } from 'react';\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Popover } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport UserInfo from '../UserInfo/UserInfo';\nimport { StoreState } from '../../reducers';\n\nexport default function ActiveUserList() {\n  // Get user list from redux store\n  const { activeUserList } = useSelector((state: StoreState) => state.chat);\n\n  // Local state\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  // Handles clicks for setting anchor to User Info (To private message)\n  const handleUserClick = (e: any, userName: string) => {\n    setUserName(userName);\n    setUserInfoVisible(true);\n    setAnchorEl(e.currentTarget);\n  };\n\n  // Closes popup of User Info\n  const handlePopoverClose = () => {\n    setUserInfoVisible(false);\n    setAnchorEl(null);\n  };\n  return (\n    <div className=\"user-list-container\">\n      <List className=\"users-list\">\n        <ListItem className=\"users-list-title\"> Active Users </ListItem>\n        {activeUserList.map(user => {\n          return (\n            <ListItem button className=\"user-list-item\" onClick={e => handleUserClick(e, user.user_name)}>\n              <ListItemAvatar className=\"message-user-icon\">\n                <Avatar>\n                  <img src={process.env.PUBLIC_URL + '/user.png'} alt=\"user icon\" height=\"48\" />\n                  <div className=\"user-list-online\"></div>\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText>{user.user_name}</ListItemText>\n            </ListItem>\n          );\n        })}\n      </List>\n\n      <Popover\n        id=\"user-info\"\n        open={userInfoVisible}\n        anchorEl={anchorEl}\n        onClose={handlePopoverClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right'\n        }}\n      >\n        <UserInfo userName={userName} setUserInfoVisible={setUserInfoVisible} />\n      </Popover>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { SwipeableDrawer, SvgIcon, Link, Tooltip } from '@material-ui/core';\n\nimport Sidebar from '../Sidebar/Sidebar';\nimport ActiveUserList from '../ActiveUserList/ActiveUserList';\nimport { StoreState } from '../../reducers';\n\nexport default function Header() {\n  // Get State from Redux Store\n  const chatStore = useSelector((state: StoreState) => state.chat);\n  const { activeChannel, activePMUser, activeView } = chatStore;\n\n  // Local state\n  const [sideBarDrawerVisible, setSideBarDrawerVisible] = useState(false);\n  const [userListDrawerVisible, setUserListDrawerVisible] = useState(false);\n  const [title, setTitle] = useState('');\n\n  // On active view change change title\n  useEffect(() => {\n    if (activeView === 'servers') {\n      setTitle(activeChannel.split('-')[0].toLowerCase());\n    } else if (activeView === 'home') {\n      setTitle(activePMUser);\n    }\n  }, [activeView, activePMUser, activeChannel]);\n\n  return (\n    <AppBar position=\"static\" className=\"appbar\">\n      <Toolbar className=\"navbar\">\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"menu\"\n          className=\"menu-burger-button\"\n          onClick={() => setSideBarDrawerVisible(true)}\n        >\n          <MenuIcon />\n        </IconButton>\n        <SwipeableDrawer\n          anchor=\"left\"\n          open={sideBarDrawerVisible}\n          onClose={() => setSideBarDrawerVisible(false)}\n          onOpen={() => setSideBarDrawerVisible(true)}\n        >\n          <Sidebar setDrawerVisible={setSideBarDrawerVisible} />\n        </SwipeableDrawer>\n        <SwipeableDrawer\n          anchor=\"right\"\n          open={userListDrawerVisible}\n          onClose={() => setUserListDrawerVisible(false)}\n          onOpen={() => setUserListDrawerVisible(true)}\n        >\n          <ActiveUserList />\n        </SwipeableDrawer>\n        <Typography variant=\"h6\">{title} </Typography>\n        <Link href=\"https://github.com/ericellb/React-Discord-Clone\" target=\"_blank\" style={{ color: 'white' }}>\n          <Tooltip title=\"Check me out on Github!\" className=\"tooltip\">\n            <IconButton>\n              <SvgIcon>\n                <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\n              </SvgIcon>\n            </IconButton>\n          </Tooltip>\n        </Link>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  Fade,\n  Popover,\n  CircularProgress\n} from '@material-ui/core';\nimport moment from 'moment';\n//import Code from 'react-code-prettify';\nimport UserInfo from '../UserInfo/UserInfo';\nimport { StoreState } from '../../reducers';\n\ninterface MessageList {\n  from: string;\n  to?: string;\n  msg: string;\n  date: Date;\n}\n\ndeclare var PR: any;\n\nexport default function Messages() {\n  // Get States from Redux Store\n  const chatStore = useSelector((state: StoreState) => state.chat);\n  const { activeServer, activeChannel, activeView, activePMUser } = chatStore;\n\n  // Local states\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\n  const [messageIndex, setMessageIndex] = useState(12);\n  const [loadMessages, setLoadMessages] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  // ref to message container (for keeping scroll to bottom of chat)\n  let messageContainerBottomRef = document.getElementById('messagesContainerBottom');\n  let messageContainerRef = document.getElementById('messagesContainer');\n\n  // Get message list from channel or from specific user\n  let messages: MessageList[] = [];\n  let messagesLength = 0;\n  if (activeView === 'servers') {\n    messages = chatStore.servers[activeServer]['channels'][activeChannel];\n    messagesLength = messages.length;\n  } else {\n    messages = chatStore.privateMessages[activePMUser];\n    // If no messages need to make empty array\n    if (messages === undefined) {\n      messages = [];\n    }\n    messagesLength = messages.length;\n  }\n\n  // Scroll to bottom of container if were not loading new messages\n  useEffect(() => {\n    if (messageContainerBottomRef && messageContainerRef) {\n      if (loadMessages) {\n        messageContainerRef.scroll(0, 60);\n      } else {\n        messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' });\n      }\n    }\n  }, [loadMessages, messages, messageContainerRef, messageContainerBottomRef]);\n\n  // Checks is message is a code block\n  const isTextCodeBlock = (message: string) => {\n    if (message.startsWith('```') && message.endsWith('```')) return true;\n    else return false;\n  };\n\n  // Handles to load more messages when scroll at top\n  const handleScrollTop = (e: any) => {\n    const element = e.target;\n    if (element.scrollTop > 60) {\n      setLoadMessages(false);\n    }\n    if (element.scrollTop === 0) {\n      if (messagesLength > messageIndex) {\n        setTimeout(() => {\n          setLoadMessages(true);\n          if (messageIndex + 12 > messagesLength) {\n            setMessageIndex(messagesLength);\n          } else {\n            setMessageIndex(messageIndex + 12);\n          }\n        }, 400);\n      }\n    }\n  };\n\n  // Formats the code block\n  const formatCode = (message: string) => {\n    return message.split('```')[1];\n  };\n\n  // Handles clicks for setting anchor to User Info (To private message)\n  const handleUserClick = (e: any, userName: string) => {\n    setUserName(userName);\n    setUserInfoVisible(true);\n    setAnchorEl(e.currentTarget);\n  };\n\n  // Closes popup of User Info\n  const handlePopoverClose = () => {\n    setUserInfoVisible(false);\n    setAnchorEl(null);\n  };\n\n  // Load pretty print on every render change\n  useEffect(() => {\n    PR.prettyPrint();\n  });\n\n  return (\n    <div\n      id=\"messagesContainer\"\n      className=\"messages-container\"\n      onScroll={e => handleScrollTop(e)}\n      ref={element => (messageContainerRef = element)}\n    >\n      {messagesLength >= messageIndex ? (\n        <div className=\"progress-container\">\n          <CircularProgress color=\"primary\" />\n        </div>\n      ) : null}\n      <List>\n        {messages !== null\n          ? messages.slice(messagesLength - messageIndex, messagesLength).map((message, i) => {\n              // Filter for null messages (dummy message on backend should fix...)\n              return (\n                <Fade in={true} timeout={500}>\n                  <ListItem className=\"message\" key={i}>\n                    <ListItemAvatar className=\"message-user-icon\">\n                      <Avatar>\n                        <img\n                          onClick={e => handleUserClick(e, message.from)}\n                          src={process.env.PUBLIC_URL + '/user.png'}\n                          alt=\"user icon\"\n                          height=\"48\"\n                        />\n                      </Avatar>\n                    </ListItemAvatar>\n                    {isTextCodeBlock(message.msg) ? (\n                      <ListItemText\n                        primary={\n                          <div className=\"message-user\" onClick={e => handleUserClick(e, message.from)}>\n                            {message.from.toLowerCase()}\n                            <div className=\"message-date\">{` - ${moment(message.date).format('LLL')}`}</div>\n                          </div>\n                        }\n                        secondary={\n                          <pre className=\"prettyprint\">\n                            <div dangerouslySetInnerHTML={{ __html: formatCode(message.msg) }}></div>\n                          </pre>\n                        }\n                        className=\"message-text\"\n                      />\n                    ) : (\n                      <ListItemText\n                        primary={\n                          <div className=\"message-user\" onClick={e => handleUserClick(e, message.from)}>\n                            {message.from.toLowerCase()}\n                            <div className=\"message-date\">{` - ${moment(message.date).format('LLL')}`}</div>\n                          </div>\n                        }\n                        secondary={message.msg}\n                        className=\"message-text\"\n                      />\n                    )}\n                  </ListItem>\n                </Fade>\n              );\n            })\n          : null}\n      </List>\n      <div ref={element => (messageContainerBottomRef = element)} id=\"messagesContainerBottom\"></div>\n      <Popover\n        id=\"user-info\"\n        open={userInfoVisible}\n        anchorEl={anchorEl}\n        onClose={handlePopoverClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right'\n        }}\n      >\n        <UserInfo userName={userName} setUserInfoVisible={setUserInfoVisible} />\n      </Popover>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { loadUserData, updateActiveState, updateActiveUserList } from '../../actions';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nimport createHashHistory from '../../history';\nimport Sidebar from '../Sidebar/Sidebar';\nimport SendMessage from '../SendMessage/SendMessage';\nimport Header from '../Header/Header';\nimport Messages from '../Messages/Messages';\nimport ActiveUserList from '../ActiveUserList/ActiveUserList';\nimport { StoreState } from '../../reducers';\n\nexport default function Dashboard() {\n  // Get State from Redux Store\n  const user = useSelector((state: StoreState) => state.user);\n  const { activeServer } = useSelector((state: StoreState) => state.chat);\n  const dispatch = useDispatch();\n\n  // Ping server every 5 minutes to update our active status\n  // Also fetches new list of active users in activeServer\n  const updateActiveStatus = () => {\n    dispatch(updateActiveState());\n    dispatch(updateActiveUserList(activeServer.split('-')[1]));\n    setTimeout(updateActiveStatus, 5 * 60000);\n  };\n\n  // Listens for changes on isSignedIn\n  // Gets initial user data upon change\n  useEffect(() => {\n    if (!user.isSignedIn) {\n      createHashHistory.push('/');\n    } else {\n      dispatch(loadUserData(user.userId));\n      updateActiveStatus();\n    } // eslint-disable-next-line\n  }, [dispatch, user.isSignedIn, user.userId]);\n\n  // Watches viewport height (fix for mobile address bar size)\n  window.addEventListener('resize', () => {\n    let vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  });\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"grid-container\">\n        <div className=\"sidebar-grid\">\n          <Sidebar />\n        </div>\n\n        <div className=\"messages-grid\">\n          <Header />\n          <Messages />\n        </div>\n\n        <div className=\"user-list-grid\">\n          <ActiveUserList />\n        </div>\n\n        <div className=\"send-messages-grid\">\n          <SendMessage />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, KeyboardEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Paper,\n  Button,\n  Card,\n  CardContent,\n  Typography,\n  CardActionArea,\n  CardMedia,\n  Slide,\n  TextField,\n  Grid,\n  IconButton,\n  Checkbox\n} from '@material-ui/core';\nimport { GroupAdd, Person, ArrowBack } from '@material-ui/icons';\nimport axios from '../Api/api';\n\nimport createHashHistory from '../../history';\nimport { signIn } from '../../actions';\n\nexport default function Auth() {\n  // Dispatch\n  const dispatch = useDispatch();\n\n  // Local state to control Modal Windows + Data fields\n  const [mainVisible, setMainVisible] = useState(true);\n  const [mainDirection, setMainDirection]: any = useState('left');\n  const [createVisible, setCreateVisible] = useState(false);\n  const [createDirection, setCreateDirection]: any = useState('left');\n  const [loginVisible, setLoginVisible] = useState(false);\n  const [loginDirection, setLoginDirection]: any = useState('left');\n  const [userName, setUserName] = useState('');\n  const [userNameError, setUserNameError] = useState(false);\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState('');\n  const [userPass, setUserPass] = useState('');\n  const [userPassError, setUserPassError] = useState(false);\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n\n  // Shows the main modal (sets transition directions and views to visible / non visible)\n  const showMain = () => {\n    setMainDirection('left');\n    setMainVisible(true);\n    setCreateVisible(false);\n    setCreateDirection('right');\n    setLoginVisible(false);\n    setLoginDirection('right');\n  };\n\n  // Handles showing the Join Server window\n  const showCreateAccount = () => {\n    setCreateDirection('left');\n    setMainDirection('right');\n    setCreateVisible(true);\n    setMainVisible(false);\n  };\n\n  // Handles showing the Create Server window\n  const showLoginAccount = () => {\n    setLoginDirection('left');\n    setMainDirection('right');\n    setLoginVisible(true);\n    setMainVisible(false);\n  };\n\n  // Handles and checks keypress and calls the callback method\n  const handleKeyPress = (e: KeyboardEvent, callBack: Function) => {\n    if (e.key === 'Enter') {\n      callBack();\n    }\n  };\n\n  // Validates input and calls callback function\n  const handleOnSubmit = (userName: string, userPass: string, callBack: Function) => {\n    let error = false;\n    if (userName === '') {\n      setUserNameError(true);\n      setUserNameErrorMsg('Name cannot be empty');\n      error = true;\n    } else setUserNameError(false);\n    if (userPass.length < 6) {\n      setUserPassError(true);\n      setUserPassErrorMsg('Passwords must be 6 characters');\n      error = true;\n    } else setUserPassError(false);\n\n    if (!error) {\n      callBack();\n    }\n  };\n\n  // Handles creation of account and calls sign in action\n  const handleCreateAccount = async (userName: string, userPass: string) => {\n    try {\n      // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\n      userName = encodeURIComponent(userName);\n      userPass = encodeURIComponent(userPass);\n\n      const response = await axios.post(`/user/create?userName=${userName}&userPass=${userPass}`);\n      if (rememberMe) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      dispatch(signIn(response.data));\n      createHashHistory.push('/dashboard');\n    } catch (err) {\n      const errorData = err.response.data;\n      if (errorData) {\n        setUserNameError(true);\n        setUserNameErrorMsg(errorData);\n      }\n    }\n  };\n\n  // Handles login of account and calls sign in action\n  const handleLoginAccount = async (userName: string, userPass: string) => {\n    // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\n    userName = encodeURIComponent(userName);\n    userPass = encodeURIComponent(userPass);\n\n    try {\n      const response = await axios.get(`/user/login?userName=${userName}&userPass=${userPass}`);\n      if (rememberMe) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      dispatch(signIn(response.data));\n      createHashHistory.push('/dashboard');\n    } catch (err) {\n      const errorData = err.response.data;\n      if (errorData) {\n        setUserNameError(true);\n        setUserNameErrorMsg(errorData);\n        setUserPassError(true);\n        setUserPassErrorMsg(errorData);\n      }\n    }\n  };\n\n  // Renders options to Create or Login to account\n  const renderMain = () => {\n    return (\n      <Slide direction={mainDirection} in={mainVisible} timeout={350} mountOnEnter unmountOnExit>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item sm={12} xs={12}>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Create an account, or sign in!\n            </Typography>\n          </Grid>\n          <Grid item sm={6} xs={12}>\n            <Card className=\"grid-card\">\n              <CardActionArea onClick={() => showCreateAccount()}>\n                <CardContent>\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>\n                    Create\n                  </Typography>\n                  <Typography variant=\"body1\" paragraph>\n                    Create a new account.\n                  </Typography>\n                  <CardMedia>\n                    <GroupAdd className=\"modal-card-icon\" />\n                  </CardMedia>\n                  <Button variant=\"contained\" color=\"primary\">\n                    Create\n                  </Button>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n          <Grid item sm={6} xs={12}>\n            <Card className=\"grid-card\">\n              <CardActionArea onClick={() => showLoginAccount()}>\n                <CardContent>\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>\n                    Login\n                  </Typography>\n                  <Typography variant=\"body1\" paragraph>\n                    Sign in to an existing account.\n                  </Typography>\n                  <CardMedia>\n                    <Person className=\"modal-card-icon\" />\n                  </CardMedia>\n                  <Button variant=\"contained\" color=\"secondary\">\n                    Login{' '}\n                  </Button>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders the form to create an account\n  const renderCreateAccount = () => {\n    return (\n      <Slide direction={createDirection} in={createVisible} timeout={350} mountOnEnter unmountOnExit>\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <IconButton onClick={showMain}>\n              <ArrowBack />\n            </IconButton>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Create Account\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <TextField\n              id=\"username\"\n              label=\"Username\"\n              value={userName}\n              error={userNameError}\n              helperText={userNameErrorMsg}\n              onChange={e => setUserName(e.target.value)}\n              margin=\"dense\"\n              autoComplete=\"off\"\n              variant=\"outlined\"\n              onKeyPress={e =>\n                handleKeyPress(e, () =>\n                  handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass))\n                )\n              }\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <TextField\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              value={userPass}\n              error={userPassError}\n              helperText={userPassErrorMsg}\n              onChange={e => setUserPass(e.target.value)}\n              margin=\"dense\"\n              autoComplete=\"off\"\n              variant=\"outlined\"\n              onKeyPress={e =>\n                handleKeyPress(e, () =>\n                  handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass))\n                )\n              }\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <div>\n              Remember Me <Checkbox value={rememberMe} onChange={e => setRememberMe(e.target.checked)} />\n            </div>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass))}\n            >\n              Create\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  // Renders the form to login to account\n  const renderLoginAccount = () => {\n    return (\n      <Slide direction={loginDirection} in={loginVisible} timeout={350} mountOnEnter unmountOnExit>\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <IconButton onClick={showMain}>\n              <ArrowBack />\n            </IconButton>\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\n              Login Account\n            </Typography>\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <TextField\n              id=\"username\"\n              label=\"Username\"\n              value={userName}\n              error={userNameError}\n              helperText={userNameErrorMsg}\n              onChange={e => setUserName(e.target.value)}\n              margin=\"dense\"\n              autoComplete=\"off\"\n              variant=\"outlined\"\n              onKeyPress={e =>\n                handleKeyPress(e, () =>\n                  handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass))\n                )\n              }\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-textfield\">\n            <TextField\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              value={userPass}\n              error={userPassError}\n              helperText={userPassErrorMsg}\n              onChange={e => setUserPass(e.target.value)}\n              margin=\"dense\"\n              autoComplete=\"off\"\n              variant=\"outlined\"\n              onKeyPress={e =>\n                handleKeyPress(e, () =>\n                  handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass))\n                )\n              }\n            />\n          </Grid>\n          <Grid item xs={12} className=\"grid-button\">\n            <div>\n              Remember Me <Checkbox value={rememberMe} onChange={e => setRememberMe(e.target.checked)} />\n            </div>\n            <Button\n              className=\"modal-login-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass))}\n            >\n              Login\n            </Button>\n          </Grid>\n        </Grid>\n      </Slide>\n    );\n  };\n\n  return (\n    <div className=\"auth-wrapper\">\n      <Paper className=\"container-prompt\">\n        {renderMain()}\n        {renderCreateAccount()}\n        {renderLoginAccount()}\n      </Paper>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport './App.css';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Auth from '../Auth/Auth';\nimport { signIn } from '../../actions';\nimport createHashHistory from '../../history';\n\nfunction App() {\n  // Dispatch\n  const dispatch = useDispatch();\n\n  // Check local storage if have login info\n  // Dispatch sign in action with our userId and redirect to dashboard\n  const checkLocalStorageAuth = () => {\n    let user = JSON.parse(localStorage.getItem('user')!);\n    if (user) {\n      dispatch(signIn(user));\n      createHashHistory.push('/dashboard');\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        {checkLocalStorageAuth()}\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n        <Route path=\"/\" exact component={Auth} />\n      </HashRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: '14px',\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: 14,\n    fontWeightLight: 400,\n    fontWeightRegular: 500,\n    fontWeightMedium: 600\n  }\n});\n","import { ACTION, ChatActionTypes } from '../actions/types';\n\nexport interface ChatStore {\n  servers: {\n    [serverName: string]: {\n      channels: {\n        [channelName: string]: { from: string; msg: string; date: Date }[];\n      };\n    };\n  };\n  privateMessages: {\n    [userPM: string]: { from: string; to: string; msg: string; date: Date }[];\n  };\n  activeServer: string;\n  activeChannel: string;\n  activeUserList: { user_name: string }[];\n  activeView: string;\n  activePMUser: string;\n  voiceClients: { userId: string; userName: string }[];\n  voiceJoinUserId: string;\n  voiceLeaveUserId: string;\n  rtcSignalData: { userId: string; ice?: any; sdp?: any };\n}\n\nconst initialState = {\n  servers: {\n    'Default-FANfDprXmt': {\n      channels: {\n        'general-0m5vBsRnfd': []\n      }\n    }\n  },\n  privateMessages: {},\n  activeServer: 'Default-FANfDprXmt',\n  activeChannel: 'general-0m5vBsRnfd',\n  activeUserList: [],\n  activeView: 'servers',\n  activePMUser: 'none',\n  voiceClients: [{ userId: '', userName: '' }],\n  voiceJoinUserId: '',\n  voiceLeaveUserId: '',\n  rtcSignalData: { userId: '' }\n};\n\nexport const chatReducer = (state: ChatStore = initialState, action: ChatActionTypes): ChatStore => {\n  switch (action.type) {\n    case ACTION.RECEIVE_SOCKET_MESSAGE:\n      let { server, channel, from, msg, date } = action.payload;\n      return {\n        ...state,\n        servers: {\n          ...state.servers,\n          [server]: {\n            ...state.servers[server],\n            channels: {\n              ...state.servers[server].channels,\n              [channel]: [...state.servers[server]['channels'][channel], { from: from, msg: msg, date: date }]\n            }\n          }\n        }\n      };\n    case ACTION.RECEIVE_SOCKET_PRIVATE_MESSAGE:\n      if (state.privateMessages[action.payload.user]) {\n        return {\n          ...state,\n          privateMessages: {\n            ...state.privateMessages,\n            [action.payload.user]: [\n              ...state.privateMessages[action.payload.user],\n              { from: action.payload.from, to: action.payload.to, msg: action.payload.msg, date: action.payload.date }\n            ]\n          }\n        };\n      } else\n        return {\n          ...state,\n          privateMessages: {\n            ...state.privateMessages,\n            [action.payload.user]: [\n              { from: action.payload.from, to: action.payload.to, msg: action.payload.msg, date: action.payload.date }\n            ]\n          }\n        };\n    case ACTION.RECEIVE_SOCKET_JOIN_VOICE:\n      return {\n        ...state,\n        voiceClients: action.payload.clients,\n        voiceJoinUserId: action.payload.userId,\n        voiceLeaveUserId: ''\n      };\n    case ACTION.RECEIVE_SOCKET_RTC_SIGNAL:\n      return { ...state, rtcSignalData: action.payload };\n    case ACTION.RECEIVE_SOCKET_LEAVE_VOICE:\n      return { ...state, voiceLeaveUserId: action.payload.userId, voiceClients: action.payload.clients };\n    case ACTION.CLEAR_VOICE_CONNECTION:\n      return { ...state, voiceClients: [], voiceLeaveUserId: '', voiceJoinUserId: '' };\n    case ACTION.ADD_CHANNEL:\n      return {\n        ...state,\n        servers: {\n          ...state.servers,\n          [action.payload.server]: {\n            ...state.servers[action.payload.server],\n            channels: {\n              ...state.servers[action.payload.server].channels,\n              [action.payload.channel]: []\n            }\n          }\n        }\n      };\n    case ACTION.ADD_SERVER:\n      return {\n        ...state,\n        servers: {\n          ...state.servers,\n          [action.payload.server]: {\n            channels: {\n              [action.payload.channel]: []\n            }\n          }\n        }\n      };\n    case ACTION.GET_INITIAL_DATA:\n      return {\n        ...state,\n        servers: action.payload.servers,\n        privateMessages: action.payload.privateMessages,\n        activeServer: Object.keys(action.payload.servers)[0],\n        activeChannel: Object.keys(state.servers[Object.keys(action.payload.servers)[0]].channels)[0]\n      };\n    case ACTION.CHANGE_SERVER:\n      return {\n        ...state,\n        activeServer: action.payload,\n        activeChannel: Object.keys(state.servers[action.payload].channels)[0]\n      };\n    case ACTION.CHANGE_CHANNEL:\n      return { ...state, activeChannel: action.payload };\n    case ACTION.CHANGE_VIEW:\n      return { ...state, activeView: action.payload, activePMUser: Object.keys(state.privateMessages)[0] };\n    case ACTION.CHANGE_PM_USER:\n      return { ...state, activePMUser: action.payload };\n    case ACTION.UPDATE_ACTIVE_USERS:\n      return { ...state, activeUserList: action.payload };\n    default:\n      return { ...state };\n  }\n};\n","import { ACTION, UserActionTypes } from '../actions/types';\n\nexport interface UserStore {\n  isSignedIn: boolean;\n  isAdmin: boolean;\n  userId: string;\n  userName: string;\n}\n\nconst initialState = {\n  isSignedIn: false,\n  isAdmin: false,\n  userId: '',\n  userName: ''\n};\n\nexport const userReducer = (state: UserStore = initialState, action: UserActionTypes): UserStore => {\n  switch (action.type) {\n    case ACTION.SIGN_IN:\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName };\n    case ACTION.SIGN_OUT:\n      return { ...state, isSignedIn: false, userId: '', userName: '', isAdmin: false };\n    default:\n      return state;\n  }\n};\n","import { chatReducer, ChatStore } from './chatReducer';\nimport { userReducer, UserStore } from './userReducer';\nimport { combineReducers } from 'redux';\n\nexport interface StoreState {\n  chat: ChatStore;\n  user: UserStore;\n}\n\nexport default combineReducers<StoreState>({\n  chat: chatReducer,\n  user: userReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : process.env.REACT_APP_API_URL;\n\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk, socketMiddleware(baseUrl || ''))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import io from 'socket.io-client';\n\nimport { ACTION, SocketActions } from '../actions/types';\nimport { Dispatch } from 'react';\nimport { AnyAction, MiddlewareAPI } from 'redux';\n\nexport const socketMiddleware = (baseUrl: string) => {\n  return (storeAPI: MiddlewareAPI) => {\n    let socket = io(baseUrl);\n    // eslint-disable-next-line\n    let listener: SocketIOClient.Emitter;\n\n    // Check actions and emit from socket if needed\n    return (next: Dispatch<AnyAction>) => (action: SocketActions) => {\n      // Send message over socket\n      if (action.type === ACTION.SEND_SOCKET_MESSAGE) {\n        socket.emit('simple-chat-message', action.payload);\n        return;\n      }\n\n      // Send private message over socket\n      if (action.type === ACTION.SEND_SOCKET_PRIVATE_MESSAGE) {\n        socket.emit('simple-chat-private-message', action.payload);\n        return;\n      }\n\n      // Pull sign in action and login to send socket server our userId (identify individual socket connectins)\n      if (action.type === ACTION.SIGN_IN) {\n        socket.emit('simple-chat-sign-in', action.payload);\n        listener = setupSocketListener(socket, storeAPI);\n      }\n\n      // Pull server list off initial data load\n      // Use to \"join\" our server \"rooms\"\n      if (action.type === ACTION.GET_INITIAL_DATA) {\n        // Get list of server Ids (used for \"room\" names on socket server)\n        let servers = Object.keys(action.payload.servers);\n        let serverIds: string[] = [];\n        servers.forEach((server, i) => {\n          serverIds[i] = server.split('-')[1];\n        });\n\n        // Subscribe to each server (Creates a room on socket io)\n        serverIds.forEach(serverId => {\n          socket.emit('subscribe', serverId);\n        });\n      }\n\n      // If user creates a server we need to join that room\n      if (action.type === ACTION.ADD_SERVER) {\n        let serverId = action.payload.server.split('-')[1];\n        socket.emit('subscribe', serverId);\n      }\n\n      // Updates our active state on server\n      if (action.type === ACTION.UPDATE_ACTIVE_STATE) {\n        socket.emit('update-active');\n      }\n\n      if (action.type === ACTION.SEND_SOCKET_JOIN_VOICE) {\n        socket.emit('user-join-voice', action.payload);\n      }\n\n      if (action.type === ACTION.SEND_SOCKET_LEAVE_VOICE) {\n        socket.emit('user-leave-voice', action.payload);\n      }\n\n      if (action.type === ACTION.SEND_SOCKET_RTC_SIGNAL) {\n        socket.emit('voice-signal', action.payload);\n      }\n\n      return next(action);\n    };\n  };\n};\n\n// Listens on socket with our userId\n// Listens to socket server for specific events for messages / private messages\n// TODO listen for listen for types of Server + payload of message\nfunction setupSocketListener(socket: SocketIOClient.Socket, storeAPI: MiddlewareAPI): SocketIOClient.Emitter {\n  return socket.on('update', (action: any) => {\n    // Check for action type\n    if (action.type === 'message') {\n      storeAPI.dispatch({\n        type: ACTION.RECEIVE_SOCKET_MESSAGE,\n        payload: action.payload\n      });\n    } else if (action.type === 'private-message') {\n      storeAPI.dispatch({\n        type: ACTION.RECEIVE_SOCKET_PRIVATE_MESSAGE,\n        payload: action.payload\n      });\n    } else if (action.type === 'user-join-voice') {\n      storeAPI.dispatch({\n        type: ACTION.RECEIVE_SOCKET_JOIN_VOICE,\n        payload: action.payload\n      });\n    } else if (action.type === 'user-leave-voice') {\n      storeAPI.dispatch({\n        type: ACTION.RECEIVE_SOCKET_LEAVE_VOICE,\n        payload: action.payload\n      });\n    } else if (action.type === 'voice-signal') {\n      storeAPI.dispatch({\n        type: ACTION.RECEIVE_SOCKET_RTC_SIGNAL,\n        payload: action.payload\n      });\n    }\n  });\n}\n"],"sourceRoot":""}